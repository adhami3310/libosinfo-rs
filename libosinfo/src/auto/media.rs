// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{Entity, Os, OsVariantList};
#[cfg(feature = "v1_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
use crate::{InstallScript, InstallScriptList};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute, pin::Pin, ptr};

glib::wrapper! {
    #[doc(alias = "OsinfoMedia")]
    pub struct Media(Object<ffi::OsinfoMedia, ffi::OsinfoMediaClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_media_get_type(),
    }
}

impl Media {
    pub const NONE: Option<&'static Media> = None;

    #[doc(alias = "osinfo_media_new")]
    pub fn new(id: &str, architecture: &str) -> Media {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_media_new(
                id.to_glib_none().0,
                architecture.to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Media`] objects.
    ///
    /// This method returns an instance of [`MediaBuilder`](crate::builders::MediaBuilder) which can be used to create [`Media`] objects.
    pub fn builder() -> MediaBuilder {
        MediaBuilder::new()
    }

    #[doc(alias = "osinfo_media_create_from_location")]
    pub fn create_from_location(
        location: &str,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
    ) -> Result<Media, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::osinfo_media_create_from_location(
                location.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "osinfo_media_create_from_location_async")]
    pub fn create_from_location_async<P: FnOnce(Result<Media, glib::Error>) + 'static>(
        location: &str,
        priority: glib::Priority,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: P,
    ) {
        assert_initialized_main_thread!();

        let main_context = glib::MainContext::ref_thread_default();
        let is_main_context_owner = main_context.is_owner();
        let has_acquired_main_context = (!is_main_context_owner)
            .then(|| main_context.acquire().ok())
            .flatten();
        assert!(
            is_main_context_owner || has_acquired_main_context.is_some(),
            "Async operations only allowed if the thread is owning the MainContext"
        );

        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> =
            Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn create_from_location_async_trampoline<
            P: FnOnce(Result<Media, glib::Error>) + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::osinfo_media_create_from_location_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> =
                Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = create_from_location_async_trampoline::<P>;
        unsafe {
            ffi::osinfo_media_create_from_location_async(
                location.to_glib_none().0,
                priority.into_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn create_from_location_future(
        location: &str,
        priority: glib::Priority,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Media, glib::Error>> + 'static>> {
        skip_assert_initialized!();
        let location = String::from(location);
        Box_::pin(gio::GioFuture::new(&(), move |_obj, cancellable, send| {
            Self::create_from_location_async(&location, priority, Some(cancellable), move |res| {
                send.resolve(res);
            });
        }))
    }

    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[doc(alias = "osinfo_media_create_from_location_with_flags")]
    pub fn create_from_location_with_flags(
        location: &str,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        flags: u32,
    ) -> Result<Media, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::osinfo_media_create_from_location_with_flags(
                location.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                flags,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[doc(alias = "osinfo_media_create_from_location_with_flags_async")]
    pub fn create_from_location_with_flags_async<
        P: FnOnce(Result<Media, glib::Error>) + 'static,
    >(
        location: &str,
        priority: glib::Priority,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: P,
        flags: u32,
    ) {
        assert_initialized_main_thread!();

        let main_context = glib::MainContext::ref_thread_default();
        let is_main_context_owner = main_context.is_owner();
        let has_acquired_main_context = (!is_main_context_owner)
            .then(|| main_context.acquire().ok())
            .flatten();
        assert!(
            is_main_context_owner || has_acquired_main_context.is_some(),
            "Async operations only allowed if the thread is owning the MainContext"
        );

        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> =
            Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn create_from_location_with_flags_async_trampoline<
            P: FnOnce(Result<Media, glib::Error>) + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::osinfo_media_create_from_location_with_flags_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> =
                Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = create_from_location_with_flags_async_trampoline::<P>;
        unsafe {
            ffi::osinfo_media_create_from_location_with_flags_async(
                location.to_glib_none().0,
                priority.into_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                flags,
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }
}

impl Default for Media {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Media`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct MediaBuilder {
    builder: glib::object::ObjectBuilder<'static, Media>,
}

impl MediaBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn application_id(self, application_id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("application-id", application_id.into()),
        }
    }

    pub fn architecture(self, architecture: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("architecture", architecture.into()),
        }
    }

    pub fn eject_after_install(self, eject_after_install: bool) -> Self {
        Self {
            builder: self
                .builder
                .property("eject-after-install", eject_after_install),
        }
    }

    pub fn initrd_path(self, initrd_path: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("initrd-path", initrd_path.into()),
        }
    }

    pub fn installer(self, installer: bool) -> Self {
        Self {
            builder: self.builder.property("installer", installer),
        }
    }

    pub fn installer_reboots(self, installer_reboots: i32) -> Self {
        Self {
            builder: self
                .builder
                .property("installer-reboots", installer_reboots),
        }
    }

    pub fn installer_script(self, installer_script: bool) -> Self {
        Self {
            builder: self.builder.property("installer-script", installer_script),
        }
    }

    pub fn kernel_path(self, kernel_path: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("kernel-path", kernel_path.into()),
        }
    }

    pub fn live(self, live: bool) -> Self {
        Self {
            builder: self.builder.property("live", live),
        }
    }

    pub fn os(self, os: &impl IsA<Os>) -> Self {
        Self {
            builder: self.builder.property("os", os.clone().upcast()),
        }
    }

    pub fn publisher_id(self, publisher_id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("publisher-id", publisher_id.into()),
        }
    }

    pub fn system_id(self, system_id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("system-id", system_id.into()),
        }
    }

    pub fn url(self, url: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("url", url.into()),
        }
    }

    pub fn volume_id(self, volume_id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("volume-id", volume_id.into()),
        }
    }

    pub fn volume_size(self, volume_size: i64) -> Self {
        Self {
            builder: self.builder.property("volume-size", volume_size),
        }
    }

    pub fn id(self, id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("id", id.into()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Media`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Media {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Media>> Sealed for T {}
}

pub trait MediaExt: IsA<Media> + sealed::Sealed + 'static {
    #[cfg(feature = "v1_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
    #[doc(alias = "osinfo_media_add_install_script")]
    fn add_install_script(&self, script: &impl IsA<InstallScript>) {
        unsafe {
            ffi::osinfo_media_add_install_script(
                self.as_ref().to_glib_none().0,
                script.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_media_get_application_id")]
    #[doc(alias = "get_application_id")]
    fn application_id(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_media_get_application_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_media_get_architecture")]
    #[doc(alias = "get_architecture")]
    fn architecture(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_media_get_architecture(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_media_get_eject_after_install")]
    #[doc(alias = "get_eject_after_install")]
    fn is_eject_after_install(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_media_get_eject_after_install(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_media_get_initrd_path")]
    #[doc(alias = "get_initrd_path")]
    fn initrd_path(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_media_get_initrd_path(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
    #[doc(alias = "osinfo_media_get_install_script_list")]
    #[doc(alias = "get_install_script_list")]
    fn install_script_list(&self) -> InstallScriptList {
        unsafe {
            from_glib_full(ffi::osinfo_media_get_install_script_list(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_media_get_installer")]
    #[doc(alias = "get_installer")]
    fn is_installer(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_media_get_installer(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_media_get_installer_reboots")]
    #[doc(alias = "get_installer_reboots")]
    fn installer_reboots(&self) -> i32 {
        unsafe { ffi::osinfo_media_get_installer_reboots(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "osinfo_media_get_kernel_path")]
    #[doc(alias = "get_kernel_path")]
    fn kernel_path(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_media_get_kernel_path(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_media_get_languages")]
    #[doc(alias = "get_languages")]
    fn languages(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_media_get_languages(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_media_get_live")]
    #[doc(alias = "get_live")]
    fn is_live(&self) -> bool {
        unsafe { from_glib(ffi::osinfo_media_get_live(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_media_get_os")]
    #[doc(alias = "get_os")]
    fn os(&self) -> Os {
        unsafe { from_glib_full(ffi::osinfo_media_get_os(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_media_get_os_variants")]
    #[doc(alias = "get_os_variants")]
    fn os_variants(&self) -> OsVariantList {
        unsafe {
            from_glib_full(ffi::osinfo_media_get_os_variants(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_media_get_publisher_id")]
    #[doc(alias = "get_publisher_id")]
    fn publisher_id(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_media_get_publisher_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_media_get_system_id")]
    #[doc(alias = "get_system_id")]
    fn system_id(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_media_get_system_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_media_get_url")]
    #[doc(alias = "get_url")]
    fn url(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::osinfo_media_get_url(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_media_get_volume_id")]
    #[doc(alias = "get_volume_id")]
    fn volume_id(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_media_get_volume_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_media_get_volume_size")]
    #[doc(alias = "get_volume_size")]
    fn volume_size(&self) -> i64 {
        unsafe { ffi::osinfo_media_get_volume_size(self.as_ref().to_glib_none().0) }
    }

    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[doc(alias = "osinfo_media_is_bootable")]
    fn is_bootable(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_media_is_bootable(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
    #[doc(alias = "osinfo_media_matches")]
    fn matches(&self, reference: &impl IsA<Media>) -> bool {
        unsafe {
            from_glib(ffi::osinfo_media_matches(
                self.as_ref().to_glib_none().0,
                reference.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_media_supports_installer_script")]
    fn supports_installer_script(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_media_supports_installer_script(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "application-id")]
    fn set_application_id(&self, application_id: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "application-id", application_id)
    }

    fn set_architecture(&self, architecture: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "architecture", architecture)
    }

    #[doc(alias = "eject-after-install")]
    fn set_eject_after_install(&self, eject_after_install: bool) {
        glib::ObjectExt::set_property(self.as_ref(), "eject-after-install", eject_after_install)
    }

    #[doc(alias = "initrd-path")]
    fn set_initrd_path(&self, initrd_path: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "initrd-path", initrd_path)
    }

    fn set_installer(&self, installer: bool) {
        glib::ObjectExt::set_property(self.as_ref(), "installer", installer)
    }

    #[doc(alias = "installer-reboots")]
    fn set_installer_reboots(&self, installer_reboots: i32) {
        glib::ObjectExt::set_property(self.as_ref(), "installer-reboots", installer_reboots)
    }

    #[doc(alias = "installer-script")]
    fn is_installer_script(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "installer-script")
    }

    #[doc(alias = "installer-script")]
    fn set_installer_script(&self, installer_script: bool) {
        glib::ObjectExt::set_property(self.as_ref(), "installer-script", installer_script)
    }

    #[doc(alias = "kernel-path")]
    fn set_kernel_path(&self, kernel_path: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "kernel-path", kernel_path)
    }

    fn set_live(&self, live: bool) {
        glib::ObjectExt::set_property(self.as_ref(), "live", live)
    }

    fn set_os<P: IsA<Os>>(&self, os: Option<&P>) {
        glib::ObjectExt::set_property(self.as_ref(), "os", os)
    }

    #[doc(alias = "publisher-id")]
    fn set_publisher_id(&self, publisher_id: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "publisher-id", publisher_id)
    }

    #[doc(alias = "system-id")]
    fn set_system_id(&self, system_id: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "system-id", system_id)
    }

    fn set_url(&self, url: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "url", url)
    }

    #[doc(alias = "volume-id")]
    fn set_volume_id(&self, volume_id: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "volume-id", volume_id)
    }

    #[doc(alias = "volume-size")]
    fn set_volume_size(&self, volume_size: i64) {
        glib::ObjectExt::set_property(self.as_ref(), "volume-size", volume_size)
    }

    #[doc(alias = "application-id")]
    fn connect_application_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_application_id_trampoline<
            P: IsA<Media>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::application-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_application_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "architecture")]
    fn connect_architecture_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_architecture_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::architecture\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_architecture_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "eject-after-install")]
    fn connect_eject_after_install_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_eject_after_install_trampoline<
            P: IsA<Media>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::eject-after-install\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_eject_after_install_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "initrd-path")]
    fn connect_initrd_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_initrd_path_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::initrd-path\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_initrd_path_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "installer")]
    fn connect_installer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_installer_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::installer\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_installer_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "installer-reboots")]
    fn connect_installer_reboots_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_installer_reboots_trampoline<
            P: IsA<Media>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::installer-reboots\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_installer_reboots_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "installer-script")]
    fn connect_installer_script_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_installer_script_trampoline<
            P: IsA<Media>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::installer-script\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_installer_script_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "kernel-path")]
    fn connect_kernel_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_kernel_path_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::kernel-path\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_kernel_path_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "languages")]
    fn connect_languages_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_languages_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::languages\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_languages_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "live")]
    fn connect_live_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_live_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::live\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_live_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "os")]
    fn connect_os_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_os_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::os\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_os_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "publisher-id")]
    fn connect_publisher_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_publisher_id_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::publisher-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_publisher_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "system-id")]
    fn connect_system_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_system_id_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::system-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_system_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "url")]
    fn connect_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_url_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::url\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_url_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "volume-id")]
    fn connect_volume_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_volume_id_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::volume-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_volume_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "volume-size")]
    fn connect_volume_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_volume_size_trampoline<P: IsA<Media>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoMedia,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Media::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::volume-size\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_volume_size_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Media>> MediaExt for O {}

impl fmt::Display for Media {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Media")
    }
}
