// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::Entity;
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "OsinfoDevice")]
    pub struct Device(Object<ffi::OsinfoDevice, ffi::OsinfoDeviceClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_device_get_type(),
    }
}

impl Device {
    pub const NONE: Option<&'static Device> = None;

    #[doc(alias = "osinfo_device_new")]
    pub fn new(id: &str) -> Device {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_device_new(id.to_glib_none().0)) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Device`] objects.
    ///
    /// This method returns an instance of [`DeviceBuilder`](crate::builders::DeviceBuilder) which can be used to create [`Device`] objects.
    pub fn builder() -> DeviceBuilder {
        DeviceBuilder::new()
    }
}

impl Default for Device {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

impl fmt::Display for Device {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str(&DeviceExt::name(self))
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Device`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DeviceBuilder {
    builder: glib::object::ObjectBuilder<'static, Device>,
}

impl DeviceBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn id(self, id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("id", id.into()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Device`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Device {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Device>> Sealed for T {}
}

pub trait DeviceExt: IsA<Device> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_device_get_bus_type")]
    #[doc(alias = "get_bus_type")]
    fn bus_type(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_bus_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_device_get_class")]
    #[doc(alias = "get_class")]
    fn class(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::osinfo_device_get_class(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_device_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::osinfo_device_get_name(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_device_get_product")]
    #[doc(alias = "get_product")]
    fn product(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_product(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_device_get_product_id")]
    #[doc(alias = "get_product_id")]
    fn product_id(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_product_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_device_get_subsystem")]
    #[doc(alias = "get_subsystem")]
    fn subsystem(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_subsystem(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_device_get_vendor")]
    #[doc(alias = "get_vendor")]
    fn vendor(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_vendor(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_device_get_vendor_id")]
    #[doc(alias = "get_vendor_id")]
    fn vendor_id(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_vendor_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl<O: IsA<Device>> DeviceExt for O {}
