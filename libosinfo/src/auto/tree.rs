// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

#[cfg(feature = "v1_5")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
use crate::OsVariantList;
use crate::{Entity, Os};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute, pin::Pin, ptr};

glib::wrapper! {
    #[doc(alias = "OsinfoTree")]
    pub struct Tree(Object<ffi::OsinfoTree, ffi::OsinfoTreeClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_tree_get_type(),
    }
}

impl Tree {
    pub const NONE: Option<&'static Tree> = None;

    #[doc(alias = "osinfo_tree_new")]
    pub fn new(id: &str, architecture: &str) -> Tree {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_tree_new(
                id.to_glib_none().0,
                architecture.to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Tree`] objects.
    ///
    /// This method returns an instance of [`TreeBuilder`](crate::builders::TreeBuilder) which can be used to create [`Tree`] objects.
    pub fn builder() -> TreeBuilder {
        TreeBuilder::new()
    }

    #[doc(alias = "osinfo_tree_create_from_location")]
    pub fn create_from_location(
        location: &str,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
    ) -> Result<Tree, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::osinfo_tree_create_from_location(
                location.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "osinfo_tree_create_from_location_async")]
    pub fn create_from_location_async<P: FnOnce(Result<Tree, glib::Error>) + 'static>(
        location: &str,
        priority: glib::Priority,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: P,
    ) {
        assert_initialized_main_thread!();

        let main_context = glib::MainContext::ref_thread_default();
        let is_main_context_owner = main_context.is_owner();
        let has_acquired_main_context = (!is_main_context_owner)
            .then(|| main_context.acquire().ok())
            .flatten();
        assert!(
            is_main_context_owner || has_acquired_main_context.is_some(),
            "Async operations only allowed if the thread is owning the MainContext"
        );

        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> =
            Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn create_from_location_async_trampoline<
            P: FnOnce(Result<Tree, glib::Error>) + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::osinfo_tree_create_from_location_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> =
                Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = create_from_location_async_trampoline::<P>;
        unsafe {
            ffi::osinfo_tree_create_from_location_async(
                location.to_glib_none().0,
                priority.into_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn create_from_location_future(
        location: &str,
        priority: glib::Priority,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Tree, glib::Error>> + 'static>> {
        skip_assert_initialized!();
        let location = String::from(location);
        Box_::pin(gio::GioFuture::new(&(), move |_obj, cancellable, send| {
            Self::create_from_location_async(&location, priority, Some(cancellable), move |res| {
                send.resolve(res);
            });
        }))
    }

    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    #[doc(alias = "osinfo_tree_create_from_treeinfo")]
    pub fn create_from_treeinfo(treeinfo: &str, location: &str) -> Result<Tree, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::osinfo_tree_create_from_treeinfo(
                treeinfo.to_glib_none().0,
                location.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl Default for Tree {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Tree`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct TreeBuilder {
    builder: glib::object::ObjectBuilder<'static, Tree>,
}

impl TreeBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn architecture(self, architecture: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("architecture", architecture.into()),
        }
    }

    pub fn boot_iso_path(self, boot_iso_path: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("boot-iso-path", boot_iso_path.into()),
        }
    }

    pub fn has_treeinfo(self, has_treeinfo: bool) -> Self {
        Self {
            builder: self.builder.property("has-treeinfo", has_treeinfo),
        }
    }

    pub fn initrd_path(self, initrd_path: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("initrd-path", initrd_path.into()),
        }
    }

    pub fn kernel_path(self, kernel_path: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("kernel-path", kernel_path.into()),
        }
    }

    pub fn os(self, os: &impl IsA<Os>) -> Self {
        Self {
            builder: self.builder.property("os", os.clone().upcast()),
        }
    }

    pub fn treeinfo_arch(self, treeinfo_arch: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("treeinfo-arch", treeinfo_arch.into()),
        }
    }

    pub fn treeinfo_family(self, treeinfo_family: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("treeinfo-family", treeinfo_family.into()),
        }
    }

    pub fn treeinfo_variant(self, treeinfo_variant: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("treeinfo-variant", treeinfo_variant.into()),
        }
    }

    pub fn treeinfo_version(self, treeinfo_version: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("treeinfo-version", treeinfo_version.into()),
        }
    }

    pub fn url(self, url: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("url", url.into()),
        }
    }

    pub fn id(self, id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("id", id.into()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Tree`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Tree {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Tree>> Sealed for T {}
}

pub trait TreeExt: IsA<Tree> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_tree_get_architecture")]
    #[doc(alias = "get_architecture")]
    fn architecture(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_architecture(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_tree_get_boot_iso_path")]
    #[doc(alias = "get_boot_iso_path")]
    fn boot_iso_path(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_boot_iso_path(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_tree_get_initrd_path")]
    #[doc(alias = "get_initrd_path")]
    fn initrd_path(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_initrd_path(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_tree_get_kernel_path")]
    #[doc(alias = "get_kernel_path")]
    fn kernel_path(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_kernel_path(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    #[doc(alias = "osinfo_tree_get_os")]
    #[doc(alias = "get_os")]
    fn os(&self) -> Os {
        unsafe { from_glib_full(ffi::osinfo_tree_get_os(self.as_ref().to_glib_none().0)) }
    }

    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    #[doc(alias = "osinfo_tree_get_os_variants")]
    #[doc(alias = "get_os_variants")]
    fn os_variants(&self) -> OsVariantList {
        unsafe {
            from_glib_full(ffi::osinfo_tree_get_os_variants(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_tree_get_treeinfo_arch")]
    #[doc(alias = "get_treeinfo_arch")]
    fn treeinfo_arch(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_treeinfo_arch(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_tree_get_treeinfo_family")]
    #[doc(alias = "get_treeinfo_family")]
    fn treeinfo_family(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_treeinfo_family(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_tree_get_treeinfo_variant")]
    #[doc(alias = "get_treeinfo_variant")]
    fn treeinfo_variant(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_treeinfo_variant(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_tree_get_treeinfo_version")]
    #[doc(alias = "get_treeinfo_version")]
    fn treeinfo_version(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_treeinfo_version(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_tree_get_url")]
    #[doc(alias = "get_url")]
    fn url(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::osinfo_tree_get_url(self.as_ref().to_glib_none().0)) }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_tree_has_treeinfo")]
    fn has_treeinfo(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_tree_has_treeinfo(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
    #[doc(alias = "osinfo_tree_matches")]
    fn matches(&self, reference: &impl IsA<Tree>) -> bool {
        unsafe {
            from_glib(ffi::osinfo_tree_matches(
                self.as_ref().to_glib_none().0,
                reference.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    #[doc(alias = "osinfo_tree_set_os")]
    fn set_os(&self, os: &impl IsA<Os>) {
        unsafe {
            ffi::osinfo_tree_set_os(self.as_ref().to_glib_none().0, os.as_ref().to_glib_none().0);
        }
    }

    fn set_architecture(&self, architecture: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "architecture", architecture)
    }

    #[doc(alias = "boot-iso-path")]
    fn set_boot_iso_path(&self, boot_iso_path: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "boot-iso-path", boot_iso_path)
    }

    #[doc(alias = "has-treeinfo")]
    fn get_property_has_treeinfo(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "has-treeinfo")
    }

    #[doc(alias = "has-treeinfo")]
    fn set_has_treeinfo(&self, has_treeinfo: bool) {
        glib::ObjectExt::set_property(self.as_ref(), "has-treeinfo", has_treeinfo)
    }

    #[doc(alias = "initrd-path")]
    fn set_initrd_path(&self, initrd_path: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "initrd-path", initrd_path)
    }

    #[doc(alias = "kernel-path")]
    fn set_kernel_path(&self, kernel_path: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "kernel-path", kernel_path)
    }

    fn get_property_os(&self) -> Option<Os> {
        glib::ObjectExt::property(self.as_ref(), "os")
    }

    fn set_property_os<P: IsA<Os>>(&self, os: Option<&P>) {
        glib::ObjectExt::set_property(self.as_ref(), "os", os)
    }

    #[doc(alias = "treeinfo-arch")]
    fn set_treeinfo_arch(&self, treeinfo_arch: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "treeinfo-arch", treeinfo_arch)
    }

    #[doc(alias = "treeinfo-family")]
    fn set_treeinfo_family(&self, treeinfo_family: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "treeinfo-family", treeinfo_family)
    }

    #[doc(alias = "treeinfo-variant")]
    fn set_treeinfo_variant(&self, treeinfo_variant: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "treeinfo-variant", treeinfo_variant)
    }

    #[doc(alias = "treeinfo-version")]
    fn set_treeinfo_version(&self, treeinfo_version: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "treeinfo-version", treeinfo_version)
    }

    fn set_url(&self, url: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "url", url)
    }

    #[doc(alias = "architecture")]
    fn connect_architecture_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_architecture_trampoline<P: IsA<Tree>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoTree,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tree::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::architecture\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_architecture_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "boot-iso-path")]
    fn connect_boot_iso_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_boot_iso_path_trampoline<P: IsA<Tree>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoTree,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tree::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::boot-iso-path\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_boot_iso_path_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "has-treeinfo")]
    fn connect_has_treeinfo_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_treeinfo_trampoline<P: IsA<Tree>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoTree,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tree::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-treeinfo\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_treeinfo_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "initrd-path")]
    fn connect_initrd_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_initrd_path_trampoline<P: IsA<Tree>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoTree,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tree::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::initrd-path\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_initrd_path_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "kernel-path")]
    fn connect_kernel_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_kernel_path_trampoline<P: IsA<Tree>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoTree,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tree::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::kernel-path\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_kernel_path_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "os")]
    fn connect_os_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_os_trampoline<P: IsA<Tree>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoTree,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tree::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::os\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_os_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "treeinfo-arch")]
    fn connect_treeinfo_arch_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_treeinfo_arch_trampoline<P: IsA<Tree>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoTree,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tree::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::treeinfo-arch\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_treeinfo_arch_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "treeinfo-family")]
    fn connect_treeinfo_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_treeinfo_family_trampoline<
            P: IsA<Tree>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::OsinfoTree,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tree::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::treeinfo-family\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_treeinfo_family_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "treeinfo-variant")]
    fn connect_treeinfo_variant_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_treeinfo_variant_trampoline<
            P: IsA<Tree>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::OsinfoTree,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tree::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::treeinfo-variant\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_treeinfo_variant_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "treeinfo-version")]
    fn connect_treeinfo_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_treeinfo_version_trampoline<
            P: IsA<Tree>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::OsinfoTree,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tree::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::treeinfo-version\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_treeinfo_version_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "url")]
    fn connect_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_url_trampoline<P: IsA<Tree>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoTree,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Tree::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::url\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_url_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Tree>> TreeExt for O {}

impl fmt::Display for Tree {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Tree")
    }
}
