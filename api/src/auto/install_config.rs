// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Entity;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct InstallConfig(Object<ffi::OsinfoInstallConfig, ffi::OsinfoInstallConfigClass>): Entity;

    match fn {
        get_type => || ffi::osinfo_install_config_get_type(),
    }
}

impl InstallConfig {
    pub fn new(id: &str) -> InstallConfig {
        unsafe {
            from_glib_full(ffi::osinfo_install_config_new(id.to_glib_none().0))
        }
    }
}

pub trait InstallConfigExt {
    fn get_admin_password(&self) -> Option<String>;

    fn get_avatar_disk(&self) -> Option<String>;

    fn get_avatar_location(&self) -> Option<String>;

    fn get_driver_signing(&self) -> bool;

    fn get_hardware_arch(&self) -> Option<String>;

    fn get_hostname(&self) -> Option<String>;

    fn get_l10n_keyboard(&self) -> Option<String>;

    fn get_l10n_language(&self) -> Option<String>;

    fn get_l10n_timezone(&self) -> Option<String>;

    fn get_post_install_drivers_disk(&self) -> Option<String>;

    fn get_post_install_drivers_location(&self) -> Option<String>;

    fn get_pre_install_drivers_disk(&self) -> Option<String>;

    fn get_pre_install_drivers_location(&self) -> Option<String>;

    fn get_reg_login(&self) -> Option<String>;

    fn get_reg_password(&self) -> Option<String>;

    fn get_reg_product_key(&self) -> Option<String>;

    fn get_script_disk(&self) -> Option<String>;

    fn get_target_disk(&self) -> Option<String>;

    fn get_user_administrator(&self) -> bool;

    fn get_user_autologin(&self) -> bool;

    fn get_user_login(&self) -> Option<String>;

    fn get_user_password(&self) -> Option<String>;

    fn get_user_realname(&self) -> Option<String>;

    fn set_admin_password(&self, password: &str);

    fn set_avatar_disk(&self, disk: &str);

    fn set_avatar_location(&self, location: &str);

    fn set_driver_signing(&self, signing: bool);

    fn set_hardware_arch(&self, arch: &str);

    fn set_hostname(&self, hostname: &str);

    fn set_l10n_keyboard(&self, keyboard: &str);

    fn set_l10n_language(&self, language: &str);

    fn set_l10n_timezone(&self, timezone: &str);

    fn set_post_install_drivers_disk(&self, disk: &str);

    fn set_post_install_drivers_location(&self, location: &str);

    fn set_pre_install_drivers_disk(&self, disk: &str);

    fn set_pre_install_drivers_location(&self, location: &str);

    fn set_reg_login(&self, name: &str);

    fn set_reg_password(&self, password: &str);

    fn set_reg_product_key(&self, key: &str);

    fn set_script_disk(&self, disk: &str);

    fn set_target_disk(&self, disk: &str);

    fn set_user_administrator(&self, admin: bool);

    fn set_user_autologin(&self, autologin: bool);

    fn set_user_login(&self, username: &str);

    fn set_user_password(&self, password: &str);

    fn set_user_realname(&self, name: &str);
}

impl<O: IsA<InstallConfig>> InstallConfigExt for O {
    fn get_admin_password(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_admin_password(self.to_glib_none().0))
        }
    }

    fn get_avatar_disk(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_avatar_disk(self.to_glib_none().0))
        }
    }

    fn get_avatar_location(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_avatar_location(self.to_glib_none().0))
        }
    }

    fn get_driver_signing(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_config_get_driver_signing(self.to_glib_none().0))
        }
    }

    fn get_hardware_arch(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_hardware_arch(self.to_glib_none().0))
        }
    }

    fn get_hostname(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_hostname(self.to_glib_none().0))
        }
    }

    fn get_l10n_keyboard(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_l10n_keyboard(self.to_glib_none().0))
        }
    }

    fn get_l10n_language(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_l10n_language(self.to_glib_none().0))
        }
    }

    fn get_l10n_timezone(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_l10n_timezone(self.to_glib_none().0))
        }
    }

    fn get_post_install_drivers_disk(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_post_install_drivers_disk(self.to_glib_none().0))
        }
    }

    fn get_post_install_drivers_location(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_post_install_drivers_location(self.to_glib_none().0))
        }
    }

    fn get_pre_install_drivers_disk(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_pre_install_drivers_disk(self.to_glib_none().0))
        }
    }

    fn get_pre_install_drivers_location(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_pre_install_drivers_location(self.to_glib_none().0))
        }
    }

    fn get_reg_login(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_reg_login(self.to_glib_none().0))
        }
    }

    fn get_reg_password(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_reg_password(self.to_glib_none().0))
        }
    }

    fn get_reg_product_key(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_reg_product_key(self.to_glib_none().0))
        }
    }

    fn get_script_disk(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_script_disk(self.to_glib_none().0))
        }
    }

    fn get_target_disk(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_target_disk(self.to_glib_none().0))
        }
    }

    fn get_user_administrator(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_config_get_user_administrator(self.to_glib_none().0))
        }
    }

    fn get_user_autologin(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_config_get_user_autologin(self.to_glib_none().0))
        }
    }

    fn get_user_login(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_user_login(self.to_glib_none().0))
        }
    }

    fn get_user_password(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_user_password(self.to_glib_none().0))
        }
    }

    fn get_user_realname(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_get_user_realname(self.to_glib_none().0))
        }
    }

    fn set_admin_password(&self, password: &str) {
        unsafe {
            ffi::osinfo_install_config_set_admin_password(self.to_glib_none().0, password.to_glib_none().0);
        }
    }

    fn set_avatar_disk(&self, disk: &str) {
        unsafe {
            ffi::osinfo_install_config_set_avatar_disk(self.to_glib_none().0, disk.to_glib_none().0);
        }
    }

    fn set_avatar_location(&self, location: &str) {
        unsafe {
            ffi::osinfo_install_config_set_avatar_location(self.to_glib_none().0, location.to_glib_none().0);
        }
    }

    fn set_driver_signing(&self, signing: bool) {
        unsafe {
            ffi::osinfo_install_config_set_driver_signing(self.to_glib_none().0, signing.to_glib());
        }
    }

    fn set_hardware_arch(&self, arch: &str) {
        unsafe {
            ffi::osinfo_install_config_set_hardware_arch(self.to_glib_none().0, arch.to_glib_none().0);
        }
    }

    fn set_hostname(&self, hostname: &str) {
        unsafe {
            ffi::osinfo_install_config_set_hostname(self.to_glib_none().0, hostname.to_glib_none().0);
        }
    }

    fn set_l10n_keyboard(&self, keyboard: &str) {
        unsafe {
            ffi::osinfo_install_config_set_l10n_keyboard(self.to_glib_none().0, keyboard.to_glib_none().0);
        }
    }

    fn set_l10n_language(&self, language: &str) {
        unsafe {
            ffi::osinfo_install_config_set_l10n_language(self.to_glib_none().0, language.to_glib_none().0);
        }
    }

    fn set_l10n_timezone(&self, timezone: &str) {
        unsafe {
            ffi::osinfo_install_config_set_l10n_timezone(self.to_glib_none().0, timezone.to_glib_none().0);
        }
    }

    fn set_post_install_drivers_disk(&self, disk: &str) {
        unsafe {
            ffi::osinfo_install_config_set_post_install_drivers_disk(self.to_glib_none().0, disk.to_glib_none().0);
        }
    }

    fn set_post_install_drivers_location(&self, location: &str) {
        unsafe {
            ffi::osinfo_install_config_set_post_install_drivers_location(self.to_glib_none().0, location.to_glib_none().0);
        }
    }

    fn set_pre_install_drivers_disk(&self, disk: &str) {
        unsafe {
            ffi::osinfo_install_config_set_pre_install_drivers_disk(self.to_glib_none().0, disk.to_glib_none().0);
        }
    }

    fn set_pre_install_drivers_location(&self, location: &str) {
        unsafe {
            ffi::osinfo_install_config_set_pre_install_drivers_location(self.to_glib_none().0, location.to_glib_none().0);
        }
    }

    fn set_reg_login(&self, name: &str) {
        unsafe {
            ffi::osinfo_install_config_set_reg_login(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    fn set_reg_password(&self, password: &str) {
        unsafe {
            ffi::osinfo_install_config_set_reg_password(self.to_glib_none().0, password.to_glib_none().0);
        }
    }

    fn set_reg_product_key(&self, key: &str) {
        unsafe {
            ffi::osinfo_install_config_set_reg_product_key(self.to_glib_none().0, key.to_glib_none().0);
        }
    }

    fn set_script_disk(&self, disk: &str) {
        unsafe {
            ffi::osinfo_install_config_set_script_disk(self.to_glib_none().0, disk.to_glib_none().0);
        }
    }

    fn set_target_disk(&self, disk: &str) {
        unsafe {
            ffi::osinfo_install_config_set_target_disk(self.to_glib_none().0, disk.to_glib_none().0);
        }
    }

    fn set_user_administrator(&self, admin: bool) {
        unsafe {
            ffi::osinfo_install_config_set_user_administrator(self.to_glib_none().0, admin.to_glib());
        }
    }

    fn set_user_autologin(&self, autologin: bool) {
        unsafe {
            ffi::osinfo_install_config_set_user_autologin(self.to_glib_none().0, autologin.to_glib());
        }
    }

    fn set_user_login(&self, username: &str) {
        unsafe {
            ffi::osinfo_install_config_set_user_login(self.to_glib_none().0, username.to_glib_none().0);
        }
    }

    fn set_user_password(&self, password: &str) {
        unsafe {
            ffi::osinfo_install_config_set_user_password(self.to_glib_none().0, password.to_glib_none().0);
        }
    }

    fn set_user_realname(&self, name: &str) {
        unsafe {
            ffi::osinfo_install_config_set_user_realname(self.to_glib_none().0, name.to_glib_none().0);
        }
    }
}
