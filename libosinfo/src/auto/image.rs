// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::Entity;
#[cfg(feature = "v1_5")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
use crate::{Os, OsVariantList};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "OsinfoImage")]
    pub struct Image(Object<ffi::OsinfoImage, ffi::OsinfoImageClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_image_get_type(),
    }
}

impl Image {
    pub const NONE: Option<&'static Image> = None;

    #[doc(alias = "osinfo_image_new")]
    pub fn new(id: &str, architecture: &str, format: &str) -> Image {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_image_new(
                id.to_glib_none().0,
                architecture.to_glib_none().0,
                format.to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Image`] objects.
    ///
    /// This method returns an instance of [`ImageBuilder`](crate::builders::ImageBuilder) which can be used to create [`Image`] objects.
    pub fn builder() -> ImageBuilder {
        ImageBuilder::new()
    }
}

impl Default for Image {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Image`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ImageBuilder {
    builder: glib::object::ObjectBuilder<'static, Image>,
}

impl ImageBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn architecture(self, architecture: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("architecture", architecture.into()),
        }
    }

    pub fn cloud_init(self, cloud_init: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("cloud-init", cloud_init.into()),
        }
    }

    pub fn format(self, format: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("format", format.into()),
        }
    }

    pub fn url(self, url: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("url", url.into()),
        }
    }

    pub fn id(self, id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("id", id.into()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Image`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Image {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Image>> Sealed for T {}
}

pub trait ImageExt: IsA<Image> + sealed::Sealed + 'static {
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_image_get_architecture")]
    #[doc(alias = "get_architecture")]
    fn architecture(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_image_get_architecture(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_image_get_cloud_init")]
    #[doc(alias = "get_cloud_init")]
    fn is_cloud_init(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_image_get_cloud_init(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_image_get_format")]
    #[doc(alias = "get_format")]
    fn format(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::osinfo_image_get_format(self.as_ref().to_glib_none().0)) }
    }

    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    #[doc(alias = "osinfo_image_get_os")]
    #[doc(alias = "get_os")]
    fn os(&self) -> Os {
        unsafe { from_glib_full(ffi::osinfo_image_get_os(self.as_ref().to_glib_none().0)) }
    }

    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    #[doc(alias = "osinfo_image_get_os_variants")]
    #[doc(alias = "get_os_variants")]
    fn os_variants(&self) -> OsVariantList {
        unsafe {
            from_glib_full(ffi::osinfo_image_get_os_variants(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_image_get_url")]
    #[doc(alias = "get_url")]
    fn url(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::osinfo_image_get_url(self.as_ref().to_glib_none().0)) }
    }

    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    #[doc(alias = "osinfo_image_set_os")]
    fn set_os(&self, os: &impl IsA<Os>) {
        unsafe {
            ffi::osinfo_image_set_os(self.as_ref().to_glib_none().0, os.as_ref().to_glib_none().0);
        }
    }

    fn get_property_architecture(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "architecture")
    }

    fn set_architecture(&self, architecture: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "architecture", architecture)
    }

    #[doc(alias = "cloud-init")]
    fn get_property_cloud_init(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "cloud-init")
    }

    #[doc(alias = "cloud-init")]
    fn set_cloud_init(&self, cloud_init: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "cloud-init", cloud_init)
    }

    fn get_property_format(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "format")
    }

    fn set_format(&self, format: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "format", format)
    }

    fn get_property_url(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "url")
    }

    fn set_url(&self, url: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "url", url)
    }

    #[doc(alias = "architecture")]
    fn connect_architecture_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_architecture_trampoline<P: IsA<Image>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoImage,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Image::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::architecture\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_architecture_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "cloud-init")]
    fn connect_cloud_init_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cloud_init_trampoline<P: IsA<Image>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoImage,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Image::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::cloud-init\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_cloud_init_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "format")]
    fn connect_format_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_format_trampoline<P: IsA<Image>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoImage,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Image::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::format\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_format_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "url")]
    fn connect_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_url_trampoline<P: IsA<Image>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoImage,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Image::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::url\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_url_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Image>> ImageExt for O {}

impl fmt::Display for Image {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Image")
    }
}
