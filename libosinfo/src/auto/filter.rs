// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::Entity;
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "OsinfoFilter")]
    pub struct Filter(Object<ffi::OsinfoFilter, ffi::OsinfoFilterClass>);

    match fn {
        type_ => || ffi::osinfo_filter_get_type(),
    }
}

impl Filter {
    pub const NONE: Option<&'static Filter> = None;

    #[doc(alias = "osinfo_filter_new")]
    pub fn new() -> Filter {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_filter_new()) }
    }
}

impl Default for Filter {
    fn default() -> Self {
        Self::new()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Filter>> Sealed for T {}
}

pub trait FilterExt: IsA<Filter> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_filter_add_constraint")]
    fn add_constraint(&self, propName: &str, propVal: &str) {
        unsafe {
            ffi::osinfo_filter_add_constraint(
                self.as_ref().to_glib_none().0,
                propName.to_glib_none().0,
                propVal.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_filter_clear_constraint")]
    fn clear_constraint(&self, propName: &str) {
        unsafe {
            ffi::osinfo_filter_clear_constraint(
                self.as_ref().to_glib_none().0,
                propName.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_filter_clear_constraints")]
    fn clear_constraints(&self) {
        unsafe {
            ffi::osinfo_filter_clear_constraints(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "osinfo_filter_get_constraint_keys")]
    #[doc(alias = "get_constraint_keys")]
    fn constraint_keys(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_filter_get_constraint_keys(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_filter_get_constraint_values")]
    #[doc(alias = "get_constraint_values")]
    fn constraint_values(&self, propName: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_filter_get_constraint_values(
                self.as_ref().to_glib_none().0,
                propName.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_filter_matches")]
    fn matches(&self, entity: &impl IsA<Entity>) -> bool {
        unsafe {
            from_glib(ffi::osinfo_filter_matches(
                self.as_ref().to_glib_none().0,
                entity.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl<O: IsA<Filter>> FilterExt for O {}

impl fmt::Display for Filter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Filter")
    }
}
