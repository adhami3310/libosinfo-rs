// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Filter;
use Product;
use ProductRelationship;
use ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct ProductFilter(Object<ffi::OsinfoProductFilter, ffi::OsinfoProductFilterClass>): Filter;

    match fn {
        get_type => || ffi::osinfo_productfilter_get_type(),
    }
}

impl ProductFilter {
    pub fn new() -> ProductFilter {
        unsafe {
            from_glib_full(ffi::osinfo_productfilter_new())
        }
    }
}

impl Default for ProductFilter {
    fn default() -> Self {
        Self::new()
    }
}

pub trait ProductFilterExt {
    fn add_product_constraint<P: IsA<Product>>(&self, relshp: ProductRelationship, product: &P) -> i32;

    fn add_support_date_constraint(&self, when: &mut glib::Date);

    fn clear_product_constraint(&self, relshp: ProductRelationship);

    fn clear_product_constraints(&self);

    fn get_product_constraint_values(&self, relshp: ProductRelationship) -> Vec<Product>;
}

impl<O: IsA<ProductFilter>> ProductFilterExt for O {
    fn add_product_constraint<P: IsA<Product>>(&self, relshp: ProductRelationship, product: &P) -> i32 {
        unsafe {
            ffi::osinfo_productfilter_add_product_constraint(self.to_glib_none().0, relshp.to_glib(), product.to_glib_none().0)
        }
    }

    fn add_support_date_constraint(&self, when: &mut glib::Date) {
        unsafe {
            ffi::osinfo_productfilter_add_support_date_constraint(self.to_glib_none().0, when.to_glib_none_mut().0);
        }
    }

    fn clear_product_constraint(&self, relshp: ProductRelationship) {
        unsafe {
            ffi::osinfo_productfilter_clear_product_constraint(self.to_glib_none().0, relshp.to_glib());
        }
    }

    fn clear_product_constraints(&self) {
        unsafe {
            ffi::osinfo_productfilter_clear_product_constraints(self.to_glib_none().0);
        }
    }

    fn get_product_constraint_values(&self, relshp: ProductRelationship) -> Vec<Product> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_productfilter_get_product_constraint_values(self.to_glib_none().0, relshp.to_glib()))
        }
    }
}
