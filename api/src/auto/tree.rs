// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Entity;
use Error;
use ffi;
use gio;
use glib;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Tree(Object<ffi::OsinfoTree, ffi::OsinfoTreeClass>): Entity;

    match fn {
        get_type => || ffi::osinfo_tree_get_type(),
    }
}

impl Tree {
    pub fn new(id: &str, architecture: &str) -> Tree {
        unsafe {
            from_glib_full(ffi::osinfo_tree_new(id.to_glib_none().0, architecture.to_glib_none().0))
        }
    }

    pub fn create_from_location<'a, P: Into<Option<&'a gio::Cancellable>>>(location: &str, cancellable: P) -> Result<Tree, Error> {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::osinfo_tree_create_from_location(location.to_glib_none().0, cancellable.0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //pub fn create_from_location_async<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(location: &str, priority: i32, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::osinfo_tree_create_from_location_async() }
    //}

    //pub fn create_from_location_finish<P: IsA</*Ignored*/gio::AsyncResult>>(res: &P) -> Result<Tree, Error> {
    //    unsafe { TODO: call ffi::osinfo_tree_create_from_location_finish() }
    //}

    //pub fn error_quark() -> /*Ignored*/glib::Quark {
    //    unsafe { TODO: call ffi::osinfo_tree_error_quark() }
    //}
}

pub trait TreeExt {
    fn get_architecture(&self) -> Option<String>;

    fn get_boot_iso_path(&self) -> Option<String>;

    fn get_initrd_path(&self) -> Option<String>;

    fn get_kernel_path(&self) -> Option<String>;

    fn get_treeinfo_arch(&self) -> Option<String>;

    fn get_treeinfo_family(&self) -> Option<String>;

    fn get_treeinfo_variant(&self) -> Option<String>;

    fn get_treeinfo_version(&self) -> Option<String>;

    fn get_url(&self) -> Option<String>;

    fn get_property_application_id(&self) -> Option<String>;

    fn set_property_application_id(&self, application_id: Option<&str>);

    fn set_property_architecture(&self, architecture: Option<&str>);

    fn set_property_boot_iso_path(&self, boot_iso_path: Option<&str>);

    fn set_property_initrd_path(&self, initrd_path: Option<&str>);

    fn set_property_kernel_path(&self, kernel_path: Option<&str>);

    fn get_property_publisher_id(&self) -> Option<String>;

    fn set_property_publisher_id(&self, publisher_id: Option<&str>);

    fn get_property_system_id(&self) -> Option<String>;

    fn set_property_system_id(&self, system_id: Option<&str>);

    fn set_property_url(&self, url: Option<&str>);

    fn get_property_volume_id(&self) -> Option<String>;

    fn set_property_volume_id(&self, volume_id: Option<&str>);

    fn connect_property_application_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_architecture_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_boot_iso_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_initrd_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_kernel_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_publisher_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_system_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_volume_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Tree> + IsA<glib::object::Object>> TreeExt for O {
    fn get_architecture(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_architecture(self.to_glib_none().0))
        }
    }

    fn get_boot_iso_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_boot_iso_path(self.to_glib_none().0))
        }
    }

    fn get_initrd_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_initrd_path(self.to_glib_none().0))
        }
    }

    fn get_kernel_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_kernel_path(self.to_glib_none().0))
        }
    }

    fn get_treeinfo_arch(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_treeinfo_arch(self.to_glib_none().0))
        }
    }

    fn get_treeinfo_family(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_treeinfo_family(self.to_glib_none().0))
        }
    }

    fn get_treeinfo_variant(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_treeinfo_variant(self.to_glib_none().0))
        }
    }

    fn get_treeinfo_version(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_treeinfo_version(self.to_glib_none().0))
        }
    }

    fn get_url(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_tree_get_url(self.to_glib_none().0))
        }
    }

    fn get_property_application_id(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "application-id".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_application_id(&self, application_id: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "application-id".to_glib_none().0, Value::from(application_id).to_glib_none().0);
        }
    }

    fn set_property_architecture(&self, architecture: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "architecture".to_glib_none().0, Value::from(architecture).to_glib_none().0);
        }
    }

    fn set_property_boot_iso_path(&self, boot_iso_path: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "boot-iso-path".to_glib_none().0, Value::from(boot_iso_path).to_glib_none().0);
        }
    }

    fn set_property_initrd_path(&self, initrd_path: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "initrd-path".to_glib_none().0, Value::from(initrd_path).to_glib_none().0);
        }
    }

    fn set_property_kernel_path(&self, kernel_path: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "kernel-path".to_glib_none().0, Value::from(kernel_path).to_glib_none().0);
        }
    }

    fn get_property_publisher_id(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "publisher-id".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_publisher_id(&self, publisher_id: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "publisher-id".to_glib_none().0, Value::from(publisher_id).to_glib_none().0);
        }
    }

    fn get_property_system_id(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "system-id".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_system_id(&self, system_id: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "system-id".to_glib_none().0, Value::from(system_id).to_glib_none().0);
        }
    }

    fn set_property_url(&self, url: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "url".to_glib_none().0, Value::from(url).to_glib_none().0);
        }
    }

    fn get_property_volume_id(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "volume-id".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_volume_id(&self, volume_id: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "volume-id".to_glib_none().0, Value::from(volume_id).to_glib_none().0);
        }
    }

    fn connect_property_application_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::application-id",
                transmute(notify_application_id_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_architecture_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::architecture",
                transmute(notify_architecture_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_boot_iso_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::boot-iso-path",
                transmute(notify_boot_iso_path_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_initrd_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::initrd-path",
                transmute(notify_initrd_path_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_kernel_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::kernel-path",
                transmute(notify_kernel_path_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_publisher_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::publisher-id",
                transmute(notify_publisher_id_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_system_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::system-id",
                transmute(notify_system_id_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::url",
                transmute(notify_url_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_volume_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::volume-id",
                transmute(notify_volume_id_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_application_id_trampoline<P>(this: *mut ffi::OsinfoTree, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Tree> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Tree::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_architecture_trampoline<P>(this: *mut ffi::OsinfoTree, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Tree> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Tree::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_boot_iso_path_trampoline<P>(this: *mut ffi::OsinfoTree, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Tree> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Tree::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_initrd_path_trampoline<P>(this: *mut ffi::OsinfoTree, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Tree> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Tree::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_kernel_path_trampoline<P>(this: *mut ffi::OsinfoTree, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Tree> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Tree::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_publisher_id_trampoline<P>(this: *mut ffi::OsinfoTree, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Tree> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Tree::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_system_id_trampoline<P>(this: *mut ffi::OsinfoTree, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Tree> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Tree::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_url_trampoline<P>(this: *mut ffi::OsinfoTree, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Tree> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Tree::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_volume_id_trampoline<P>(this: *mut ffi::OsinfoTree, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Tree> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Tree::from_glib_borrow(this).downcast_unchecked())
}
