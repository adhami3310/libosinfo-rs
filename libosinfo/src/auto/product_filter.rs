// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{Filter, Product, ProductRelationship};
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "OsinfoProductFilter")]
    pub struct ProductFilter(Object<ffi::OsinfoProductFilter, ffi::OsinfoProductFilterClass>) @extends Filter;

    match fn {
        type_ => || ffi::osinfo_productfilter_get_type(),
    }
}

impl ProductFilter {
    pub const NONE: Option<&'static ProductFilter> = None;

    #[doc(alias = "osinfo_productfilter_new")]
    pub fn new() -> ProductFilter {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_productfilter_new()) }
    }
}

impl Default for ProductFilter {
    fn default() -> Self {
        Self::new()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::ProductFilter>> Sealed for T {}
}

pub trait ProductFilterExt: IsA<ProductFilter> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_productfilter_add_product_constraint")]
    fn add_product_constraint(
        &self,
        relshp: ProductRelationship,
        product: &impl IsA<Product>,
    ) -> i32 {
        unsafe {
            ffi::osinfo_productfilter_add_product_constraint(
                self.as_ref().to_glib_none().0,
                relshp.into_glib(),
                product.as_ref().to_glib_none().0,
            )
        }
    }

    #[doc(alias = "osinfo_productfilter_add_support_date_constraint")]
    fn add_support_date_constraint(&self, when: &mut glib::Date) {
        unsafe {
            ffi::osinfo_productfilter_add_support_date_constraint(
                self.as_ref().to_glib_none().0,
                when.to_glib_none_mut().0,
            );
        }
    }

    #[doc(alias = "osinfo_productfilter_clear_product_constraint")]
    fn clear_product_constraint(&self, relshp: ProductRelationship) {
        unsafe {
            ffi::osinfo_productfilter_clear_product_constraint(
                self.as_ref().to_glib_none().0,
                relshp.into_glib(),
            );
        }
    }

    #[doc(alias = "osinfo_productfilter_clear_product_constraints")]
    fn clear_product_constraints(&self) {
        unsafe {
            ffi::osinfo_productfilter_clear_product_constraints(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "osinfo_productfilter_get_product_constraint_values")]
    #[doc(alias = "get_product_constraint_values")]
    fn product_constraint_values(&self, relshp: ProductRelationship) -> Vec<Product> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(
                ffi::osinfo_productfilter_get_product_constraint_values(
                    self.as_ref().to_glib_none().0,
                    relshp.into_glib(),
                ),
            )
        }
    }
}

impl<O: IsA<ProductFilter>> ProductFilterExt for O {}

impl fmt::Display for ProductFilter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ProductFilter")
    }
}
