// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{Device, DeviceLink, DeviceLinkList, DeviceList, Entity, Filter, Product};
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "OsinfoPlatform")]
    pub struct Platform(Object<ffi::OsinfoPlatform, ffi::OsinfoPlatformClass>) @extends Product, Entity;

    match fn {
        type_ => || ffi::osinfo_platform_get_type(),
    }
}

impl Platform {
    pub const NONE: Option<&'static Platform> = None;

    #[doc(alias = "osinfo_platform_new")]
    pub fn new(id: &str) -> Platform {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_platform_new(id.to_glib_none().0)) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Platform`] objects.
    ///
    /// This method returns an instance of [`PlatformBuilder`](crate::builders::PlatformBuilder) which can be used to create [`Platform`] objects.
    pub fn builder() -> PlatformBuilder {
        PlatformBuilder::new()
    }
}

impl Default for Platform {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Platform`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct PlatformBuilder {
    builder: glib::object::ObjectBuilder<'static, Platform>,
}

impl PlatformBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn id(self, id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("id", id.into()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Platform`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Platform {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Platform>> Sealed for T {}
}

pub trait PlatformExt: IsA<Platform> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_platform_add_device")]
    fn add_device(&self, dev: &impl IsA<Device>) -> DeviceLink {
        unsafe {
            from_glib_none(ffi::osinfo_platform_add_device(
                self.as_ref().to_glib_none().0,
                dev.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_platform_get_all_devices")]
    #[doc(alias = "get_all_devices")]
    fn all_devices(&self, filter: Option<&impl IsA<Filter>>) -> DeviceList {
        unsafe {
            from_glib_full(ffi::osinfo_platform_get_all_devices(
                self.as_ref().to_glib_none().0,
                filter.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_platform_get_device_links")]
    #[doc(alias = "get_device_links")]
    fn device_links(&self, filter: Option<&impl IsA<Filter>>) -> DeviceLinkList {
        unsafe {
            from_glib_full(ffi::osinfo_platform_get_device_links(
                self.as_ref().to_glib_none().0,
                filter.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_platform_get_devices")]
    #[doc(alias = "get_devices")]
    fn devices(&self, filter: Option<&impl IsA<Filter>>) -> DeviceList {
        unsafe {
            from_glib_full(ffi::osinfo_platform_get_devices(
                self.as_ref().to_glib_none().0,
                filter.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }
}

impl<O: IsA<Platform>> PlatformExt for O {}

impl fmt::Display for Platform {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Platform")
    }
}
