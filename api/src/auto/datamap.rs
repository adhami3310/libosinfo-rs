// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Entity;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Datamap(Object<ffi::OsinfoDatamap, ffi::OsinfoDatamapClass>): Entity;

    match fn {
        get_type => || ffi::osinfo_datamap_get_type(),
    }
}

impl Datamap {
    pub fn new(id: &str) -> Datamap {
        unsafe {
            from_glib_full(ffi::osinfo_datamap_new(id.to_glib_none().0))
        }
    }
}

pub trait DatamapExt {
    fn insert(&self, inval: &str, outval: &str);

    fn lookup(&self, inval: &str) -> Option<String>;

    fn reverse_lookup(&self, outval: &str) -> Option<String>;
}

impl<O: IsA<Datamap>> DatamapExt for O {
    fn insert(&self, inval: &str, outval: &str) {
        unsafe {
            ffi::osinfo_datamap_insert(self.to_glib_none().0, inval.to_glib_none().0, outval.to_glib_none().0);
        }
    }

    fn lookup(&self, inval: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_datamap_lookup(self.to_glib_none().0, inval.to_glib_none().0))
        }
    }

    fn reverse_lookup(&self, outval: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_datamap_reverse_lookup(self.to_glib_none().0, outval.to_glib_none().0))
        }
    }
}
