// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "OsinfoEntity")]
    pub struct Entity(Object<ffi::OsinfoEntity, ffi::OsinfoEntityClass>);

    match fn {
        type_ => || ffi::osinfo_entity_get_type(),
    }
}

impl Entity {
    pub const NONE: Option<&'static Entity> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Entity>> Sealed for T {}
}

pub trait EntityExt: IsA<Entity> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_entity_add_param")]
    fn add_param(&self, key: &str, value: &str) {
        unsafe {
            ffi::osinfo_entity_add_param(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_entity_clear_param")]
    fn clear_param(&self, key: &str) {
        unsafe {
            ffi::osinfo_entity_clear_param(self.as_ref().to_glib_none().0, key.to_glib_none().0);
        }
    }

    #[doc(alias = "osinfo_entity_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::osinfo_entity_get_id(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_entity_get_param_keys")]
    #[doc(alias = "get_param_keys")]
    fn param_keys(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_entity_get_param_keys(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_entity_get_param_value")]
    #[doc(alias = "get_param_value")]
    fn param_value(&self, key: &str) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_entity_get_param_value(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_entity_get_param_value_boolean")]
    #[doc(alias = "get_param_value_boolean")]
    fn is_param_value_boolean(&self, key: &str) -> bool {
        unsafe {
            from_glib(ffi::osinfo_entity_get_param_value_boolean(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_entity_get_param_value_boolean_with_default")]
    #[doc(alias = "get_param_value_boolean_with_default")]
    fn is_param_value_boolean_with_default(&self, key: &str, default_value: bool) -> bool {
        unsafe {
            from_glib(ffi::osinfo_entity_get_param_value_boolean_with_default(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
                default_value.into_glib(),
            ))
        }
    }

    #[doc(alias = "osinfo_entity_get_param_value_enum")]
    #[doc(alias = "get_param_value_enum")]
    fn param_value_enum(&self, key: &str, enum_type: glib::types::Type, default_value: i32) -> i32 {
        unsafe {
            ffi::osinfo_entity_get_param_value_enum(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
                enum_type.into_glib(),
                default_value,
            )
        }
    }

    #[doc(alias = "osinfo_entity_get_param_value_int64")]
    #[doc(alias = "get_param_value_int64")]
    fn param_value_int64(&self, key: &str) -> i64 {
        unsafe {
            ffi::osinfo_entity_get_param_value_int64(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
            )
        }
    }

    #[doc(alias = "osinfo_entity_get_param_value_int64_with_default")]
    #[doc(alias = "get_param_value_int64_with_default")]
    fn param_value_int64_with_default(&self, key: &str, default_value: i64) -> i64 {
        unsafe {
            ffi::osinfo_entity_get_param_value_int64_with_default(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
                default_value,
            )
        }
    }

    #[doc(alias = "osinfo_entity_get_param_value_list")]
    #[doc(alias = "get_param_value_list")]
    fn param_value_list(&self, key: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_entity_get_param_value_list(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_entity_set_param")]
    fn set_param(&self, key: &str, value: &str) {
        unsafe {
            ffi::osinfo_entity_set_param(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_entity_set_param_boolean")]
    fn set_param_boolean(&self, key: &str, value: bool) {
        unsafe {
            ffi::osinfo_entity_set_param_boolean(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
                value.into_glib(),
            );
        }
    }

    #[doc(alias = "osinfo_entity_set_param_enum")]
    fn set_param_enum(&self, key: &str, value: i32, enum_type: glib::types::Type) {
        unsafe {
            ffi::osinfo_entity_set_param_enum(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
                value,
                enum_type.into_glib(),
            );
        }
    }

    #[doc(alias = "osinfo_entity_set_param_int64")]
    fn set_param_int64(&self, key: &str, value: i64) {
        unsafe {
            ffi::osinfo_entity_set_param_int64(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
                value,
            );
        }
    }

    fn set_id(&self, id: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(), "id", id)
    }

    #[doc(alias = "id")]
    fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<P: IsA<Entity>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoEntity,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Entity::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Entity>> EntityExt for O {}

impl fmt::Display for Entity {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Entity")
    }
}
