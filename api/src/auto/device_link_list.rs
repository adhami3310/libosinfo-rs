// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use DeviceList;
use Filter;
use List;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct DeviceLinkList(Object<ffi::OsinfoDeviceLinkList, ffi::OsinfoDeviceLinkListClass>): List;

    match fn {
        get_type => || ffi::osinfo_devicelinklist_get_type(),
    }
}

impl DeviceLinkList {
    pub fn new() -> DeviceLinkList {
        unsafe {
            from_glib_full(ffi::osinfo_devicelinklist_new())
        }
    }
}

impl Default for DeviceLinkList {
    fn default() -> Self {
        Self::new()
    }
}

pub trait DeviceLinkListExt {
    fn get_devices<'a, P: IsA<Filter> + 'a, Q: Into<Option<&'a P>>>(&self, filter: Q) -> Option<DeviceList>;

    fn new_copy(&self) -> Option<DeviceLinkList>;

    fn new_filtered<P: IsA<Filter>>(&self, filter: &P) -> Option<DeviceLinkList>;

    fn new_intersection(&self, sourceTwo: &DeviceLinkList) -> Option<DeviceLinkList>;

    fn new_union(&self, sourceTwo: &DeviceLinkList) -> Option<DeviceLinkList>;
}

impl<O: IsA<DeviceLinkList>> DeviceLinkListExt for O {
    fn get_devices<'a, P: IsA<Filter> + 'a, Q: Into<Option<&'a P>>>(&self, filter: Q) -> Option<DeviceList> {
        let filter = filter.into();
        let filter = filter.to_glib_none();
        unsafe {
            from_glib_full(ffi::osinfo_devicelinklist_get_devices(self.to_glib_none().0, filter.0))
        }
    }

    fn new_copy(&self) -> Option<DeviceLinkList> {
        unsafe {
            from_glib_full(ffi::osinfo_devicelinklist_new_copy(self.to_glib_none().0))
        }
    }

    fn new_filtered<P: IsA<Filter>>(&self, filter: &P) -> Option<DeviceLinkList> {
        unsafe {
            from_glib_full(ffi::osinfo_devicelinklist_new_filtered(self.to_glib_none().0, filter.to_glib_none().0))
        }
    }

    fn new_intersection(&self, sourceTwo: &DeviceLinkList) -> Option<DeviceLinkList> {
        unsafe {
            from_glib_full(ffi::osinfo_devicelinklist_new_intersection(self.to_glib_none().0, sourceTwo.to_glib_none().0))
        }
    }

    fn new_union(&self, sourceTwo: &DeviceLinkList) -> Option<DeviceLinkList> {
        unsafe {
            from_glib_full(ffi::osinfo_devicelinklist_new_union(self.to_glib_none().0, sourceTwo.to_glib_none().0))
        }
    }
}
