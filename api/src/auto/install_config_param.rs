// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Datamap;
use Entity;
use InstallConfigParamPolicy;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct InstallConfigParam(Object<ffi::OsinfoInstallConfigParam, ffi::OsinfoInstallConfigParamClass>): Entity;

    match fn {
        get_type => || ffi::osinfo_install_config_param_get_type(),
    }
}

impl InstallConfigParam {
    pub fn new(name: &str) -> InstallConfigParam {
        unsafe {
            from_glib_full(ffi::osinfo_install_config_param_new(name.to_glib_none().0))
        }
    }
}

pub trait InstallConfigParamExt {
    fn get_name(&self) -> Option<String>;

    fn get_policy(&self) -> InstallConfigParamPolicy;

    fn get_value_map(&self) -> Option<Datamap>;

    fn is_optional(&self) -> bool;

    fn is_required(&self) -> bool;

    fn set_value_map(&self, datamap: &Datamap);

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_policy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_value_map_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<InstallConfigParam> + IsA<glib::object::Object>> InstallConfigParamExt for O {
    fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_param_get_name(self.to_glib_none().0))
        }
    }

    fn get_policy(&self) -> InstallConfigParamPolicy {
        unsafe {
            from_glib(ffi::osinfo_install_config_param_get_policy(self.to_glib_none().0))
        }
    }

    fn get_value_map(&self) -> Option<Datamap> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_param_get_value_map(self.to_glib_none().0))
        }
    }

    fn is_optional(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_config_param_is_optional(self.to_glib_none().0))
        }
    }

    fn is_required(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_config_param_is_required(self.to_glib_none().0))
        }
    }

    fn set_value_map(&self, datamap: &Datamap) {
        unsafe {
            ffi::osinfo_install_config_param_set_value_map(self.to_glib_none().0, datamap.to_glib_none().0);
        }
    }

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::name",
                transmute(notify_name_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_policy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::policy",
                transmute(notify_policy_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_value_map_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::value-map",
                transmute(notify_value_map_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_name_trampoline<P>(this: *mut ffi::OsinfoInstallConfigParam, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<InstallConfigParam> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&InstallConfigParam::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_policy_trampoline<P>(this: *mut ffi::OsinfoInstallConfigParam, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<InstallConfigParam> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&InstallConfigParam::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_value_map_trampoline<P>(this: *mut ffi::OsinfoInstallConfigParam, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<InstallConfigParam> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&InstallConfigParam::from_glib_borrow(this).downcast_unchecked())
}
