// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::List;
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "OsinfoTreeList")]
    pub struct TreeList(Object<ffi::OsinfoTreeList, ffi::OsinfoTreeListClass>) @extends List;

    match fn {
        type_ => || ffi::osinfo_treelist_get_type(),
    }
}

impl TreeList {
    pub const NONE: Option<&'static TreeList> = None;

    #[doc(alias = "osinfo_treelist_new")]
    pub fn new() -> TreeList {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_treelist_new()) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`TreeList`] objects.
    ///
    /// This method returns an instance of [`TreeListBuilder`](crate::builders::TreeListBuilder) which can be used to create [`TreeList`] objects.
    pub fn builder() -> TreeListBuilder {
        TreeListBuilder::new()
    }
}

impl Default for TreeList {
    fn default() -> Self {
        Self::new()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`TreeList`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct TreeListBuilder {
    builder: glib::object::ObjectBuilder<'static, TreeList>,
}

impl TreeListBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn element_type(self, element_type: glib::types::Type) -> Self {
        Self {
            builder: self.builder.property("element-type", element_type),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`TreeList`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> TreeList {
        self.builder.build()
    }
}

impl fmt::Display for TreeList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("TreeList")
    }
}
