// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{
    Device, DeviceDriver, DeviceDriverList, DeviceLink, DeviceLinkList, DeviceList, Entity, Filter,
    InstallScript, InstallScriptList, Media, MediaList, OsVariant, OsVariantList, Product,
    ReleaseStatus, Resources, ResourcesList, Tree, TreeList,
};
#[cfg(feature = "v1_7")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
use crate::{Firmware, FirmwareList};
#[cfg(feature = "v1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
use crate::{Image, ImageList};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "OsinfoOs")]
    pub struct Os(Object<ffi::OsinfoOs, ffi::OsinfoOsClass>) @extends Product, Entity;

    match fn {
        type_ => || ffi::osinfo_os_get_type(),
    }
}

impl Os {
    pub const NONE: Option<&'static Os> = None;

    #[doc(alias = "osinfo_os_new")]
    pub fn new(id: &str) -> Os {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_os_new(id.to_glib_none().0)) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Os`] objects.
    ///
    /// This method returns an instance of [`OsBuilder`](crate::builders::OsBuilder) which can be used to create [`Os`] objects.
    pub fn builder() -> OsBuilder {
        OsBuilder::new()
    }
}

impl Default for Os {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Os`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct OsBuilder {
    builder: glib::object::ObjectBuilder<'static, Os>,
}

impl OsBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn id(self, id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("id", id.into()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Os`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Os {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Os>> Sealed for T {}
}

pub trait OsExt: IsA<Os> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_os_add_device")]
    fn add_device(&self, dev: &impl IsA<Device>) -> DeviceLink {
        unsafe {
            from_glib_none(ffi::osinfo_os_add_device(
                self.as_ref().to_glib_none().0,
                dev.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_add_device_driver")]
    fn add_device_driver(&self, driver: &impl IsA<DeviceDriver>) {
        unsafe {
            ffi::osinfo_os_add_device_driver(
                self.as_ref().to_glib_none().0,
                driver.as_ref().to_glib_none().0,
            );
        }
    }

    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    #[doc(alias = "osinfo_os_add_firmware")]
    fn add_firmware(&self, firmware: &impl IsA<Firmware>) {
        unsafe {
            ffi::osinfo_os_add_firmware(
                self.as_ref().to_glib_none().0,
                firmware.as_ref().to_glib_none().0,
            );
        }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_add_image")]
    fn add_image(&self, image: &impl IsA<Image>) {
        unsafe {
            ffi::osinfo_os_add_image(
                self.as_ref().to_glib_none().0,
                image.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_os_add_install_script")]
    fn add_install_script(&self, script: &impl IsA<InstallScript>) {
        unsafe {
            ffi::osinfo_os_add_install_script(
                self.as_ref().to_glib_none().0,
                script.as_ref().to_glib_none().0,
            );
        }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_add_maximum_resources")]
    fn add_maximum_resources(&self, resources: &impl IsA<Resources>) {
        unsafe {
            ffi::osinfo_os_add_maximum_resources(
                self.as_ref().to_glib_none().0,
                resources.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_os_add_media")]
    fn add_media(&self, media: &impl IsA<Media>) {
        unsafe {
            ffi::osinfo_os_add_media(
                self.as_ref().to_glib_none().0,
                media.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_os_add_minimum_resources")]
    fn add_minimum_resources(&self, resources: &impl IsA<Resources>) {
        unsafe {
            ffi::osinfo_os_add_minimum_resources(
                self.as_ref().to_glib_none().0,
                resources.as_ref().to_glib_none().0,
            );
        }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_add_network_install_resources")]
    fn add_network_install_resources(&self, resources: &impl IsA<Resources>) {
        unsafe {
            ffi::osinfo_os_add_network_install_resources(
                self.as_ref().to_glib_none().0,
                resources.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_os_add_recommended_resources")]
    fn add_recommended_resources(&self, resources: &impl IsA<Resources>) {
        unsafe {
            ffi::osinfo_os_add_recommended_resources(
                self.as_ref().to_glib_none().0,
                resources.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_os_add_tree")]
    fn add_tree(&self, tree: &impl IsA<Tree>) {
        unsafe {
            ffi::osinfo_os_add_tree(
                self.as_ref().to_glib_none().0,
                tree.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_os_add_variant")]
    fn add_variant(&self, variant: &impl IsA<OsVariant>) {
        unsafe {
            ffi::osinfo_os_add_variant(
                self.as_ref().to_glib_none().0,
                variant.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_os_find_install_script")]
    fn find_install_script(&self, profile: &str) -> InstallScript {
        unsafe {
            from_glib_none(ffi::osinfo_os_find_install_script(
                self.as_ref().to_glib_none().0,
                profile.to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_get_all_device_links")]
    #[doc(alias = "get_all_device_links")]
    fn all_device_links(&self, filter: Option<&impl IsA<Filter>>) -> DeviceLinkList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_all_device_links(
                self.as_ref().to_glib_none().0,
                filter.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_all_devices")]
    #[doc(alias = "get_all_devices")]
    fn all_devices(&self, filter: Option<&impl IsA<Filter>>) -> DeviceList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_all_devices(
                self.as_ref().to_glib_none().0,
                filter.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_cloud_image_username")]
    #[doc(alias = "get_cloud_image_username")]
    fn cloud_image_username(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_os_get_cloud_image_username(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
    #[doc(alias = "osinfo_os_get_complete_firmware_list")]
    #[doc(alias = "get_complete_firmware_list")]
    fn complete_firmware_list(&self, filter: Option<&impl IsA<Filter>>) -> FirmwareList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_complete_firmware_list(
                self.as_ref().to_glib_none().0,
                filter.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_device_drivers")]
    #[doc(alias = "get_device_drivers")]
    fn device_drivers(&self) -> DeviceDriverList {
        unsafe {
            from_glib_none(ffi::osinfo_os_get_device_drivers(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    #[doc(alias = "osinfo_os_get_device_drivers_prioritized")]
    #[doc(alias = "get_device_drivers_prioritized")]
    fn device_drivers_prioritized(&self) -> DeviceDriverList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_device_drivers_prioritized(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_device_links")]
    #[doc(alias = "get_device_links")]
    fn device_links(&self, filter: Option<&impl IsA<Filter>>) -> DeviceLinkList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_device_links(
                self.as_ref().to_glib_none().0,
                filter.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_devices")]
    #[doc(alias = "get_devices")]
    fn devices(&self, filter: Option<&impl IsA<Filter>>) -> DeviceList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_devices(
                self.as_ref().to_glib_none().0,
                filter.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_devices_by_property")]
    #[doc(alias = "get_devices_by_property")]
    fn devices_by_property(&self, property: &str, value: &str, inherited: bool) -> DeviceList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_devices_by_property(
                self.as_ref().to_glib_none().0,
                property.to_glib_none().0,
                value.to_glib_none().0,
                inherited.into_glib(),
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_distro")]
    #[doc(alias = "get_distro")]
    fn distro(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::osinfo_os_get_distro(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_os_get_family")]
    #[doc(alias = "get_family")]
    fn family(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::osinfo_os_get_family(self.as_ref().to_glib_none().0)) }
    }

    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    #[doc(alias = "osinfo_os_get_firmware_list")]
    #[doc(alias = "get_firmware_list")]
    fn firmware_list(&self, filter: Option<&impl IsA<Filter>>) -> FirmwareList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_firmware_list(
                self.as_ref().to_glib_none().0,
                filter.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_get_image_list")]
    #[doc(alias = "get_image_list")]
    fn image_list(&self) -> ImageList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_image_list(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_install_script_list")]
    #[doc(alias = "get_install_script_list")]
    fn install_script_list(&self) -> InstallScriptList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_install_script_list(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_kernel_url_argument")]
    #[doc(alias = "get_kernel_url_argument")]
    fn kernel_url_argument(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_os_get_kernel_url_argument(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_get_maximum_resources")]
    #[doc(alias = "get_maximum_resources")]
    fn maximum_resources(&self) -> ResourcesList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_maximum_resources(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_media_list")]
    #[doc(alias = "get_media_list")]
    fn media_list(&self) -> MediaList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_media_list(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_minimum_resources")]
    #[doc(alias = "get_minimum_resources")]
    fn minimum_resources(&self) -> ResourcesList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_minimum_resources(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_get_network_install_resources")]
    #[doc(alias = "get_network_install_resources")]
    fn network_install_resources(&self) -> ResourcesList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_network_install_resources(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_recommended_resources")]
    #[doc(alias = "get_recommended_resources")]
    fn recommended_resources(&self) -> ResourcesList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_recommended_resources(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_release_status")]
    #[doc(alias = "get_release_status")]
    fn release_status(&self) -> ReleaseStatus {
        unsafe {
            from_glib(ffi::osinfo_os_get_release_status(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_os_get_tree_list")]
    #[doc(alias = "get_tree_list")]
    fn tree_list(&self) -> TreeList {
        unsafe { from_glib_full(ffi::osinfo_os_get_tree_list(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_os_get_variant_list")]
    #[doc(alias = "get_variant_list")]
    fn variant_list(&self) -> OsVariantList {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_variant_list(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "cloud-image-username")]
    fn connect_cloud_image_username_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cloud_image_username_trampoline<
            P: IsA<Os>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::OsinfoOs,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Os::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::cloud-image-username\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_cloud_image_username_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "distro")]
    fn connect_distro_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_distro_trampoline<P: IsA<Os>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoOs,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Os::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::distro\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_distro_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "family")]
    fn connect_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_family_trampoline<P: IsA<Os>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoOs,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Os::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::family\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_family_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "kernel-url-argument")]
    fn connect_kernel_url_argument_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_kernel_url_argument_trampoline<
            P: IsA<Os>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::OsinfoOs,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Os::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::kernel-url-argument\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_kernel_url_argument_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Os>> OsExt for O {}

impl fmt::Display for Os {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Os")
    }
}
