// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{List, ProductList};
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "OsinfoOsList")]
    pub struct OsList(Object<ffi::OsinfoOsList, ffi::OsinfoOsListClass>) @extends ProductList, List;

    match fn {
        type_ => || ffi::osinfo_oslist_get_type(),
    }
}

impl OsList {
    pub const NONE: Option<&'static OsList> = None;

    #[doc(alias = "osinfo_oslist_new")]
    pub fn new() -> OsList {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_oslist_new()) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`OsList`] objects.
    ///
    /// This method returns an instance of [`OsListBuilder`](crate::builders::OsListBuilder) which can be used to create [`OsList`] objects.
    pub fn builder() -> OsListBuilder {
        OsListBuilder::new()
    }
}

impl Default for OsList {
    fn default() -> Self {
        Self::new()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`OsList`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct OsListBuilder {
    builder: glib::object::ObjectBuilder<'static, OsList>,
}

impl OsListBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn element_type(self, element_type: glib::types::Type) -> Self {
        Self {
            builder: self.builder.property("element-type", element_type),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`OsList`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> OsList {
        self.builder.build()
    }
}

impl fmt::Display for OsList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("OsList")
    }
}
