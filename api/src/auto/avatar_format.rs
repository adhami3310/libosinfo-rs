// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Entity;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct AvatarFormat(Object<ffi::OsinfoAvatarFormat, ffi::OsinfoAvatarFormatClass>): Entity;

    match fn {
        get_type => || ffi::osinfo_avatar_format_get_type(),
    }
}

impl AvatarFormat {
    pub fn new() -> AvatarFormat {
        unsafe {
            from_glib_full(ffi::osinfo_avatar_format_new())
        }
    }
}

impl Default for AvatarFormat {
    fn default() -> Self {
        Self::new()
    }
}

pub trait AvatarFormatExt {
    fn get_alpha(&self) -> bool;

    fn get_height(&self) -> i32;

    fn get_mime_types(&self) -> Vec<String>;

    fn get_width(&self) -> i32;

    fn connect_property_alpha_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mime_types_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<AvatarFormat> + IsA<glib::object::Object>> AvatarFormatExt for O {
    fn get_alpha(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_avatar_format_get_alpha(self.to_glib_none().0))
        }
    }

    fn get_height(&self) -> i32 {
        unsafe {
            ffi::osinfo_avatar_format_get_height(self.to_glib_none().0)
        }
    }

    fn get_mime_types(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_avatar_format_get_mime_types(self.to_glib_none().0))
        }
    }

    fn get_width(&self) -> i32 {
        unsafe {
            ffi::osinfo_avatar_format_get_width(self.to_glib_none().0)
        }
    }

    fn connect_property_alpha_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::alpha",
                transmute(notify_alpha_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::height",
                transmute(notify_height_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_mime_types_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::mime-types",
                transmute(notify_mime_types_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::width",
                transmute(notify_width_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_alpha_trampoline<P>(this: *mut ffi::OsinfoAvatarFormat, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<AvatarFormat> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&AvatarFormat::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_height_trampoline<P>(this: *mut ffi::OsinfoAvatarFormat, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<AvatarFormat> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&AvatarFormat::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_mime_types_trampoline<P>(this: *mut ffi::OsinfoAvatarFormat, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<AvatarFormat> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&AvatarFormat::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_width_trampoline<P>(this: *mut ffi::OsinfoAvatarFormat, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<AvatarFormat> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&AvatarFormat::from_glib_borrow(this).downcast_unchecked())
}
