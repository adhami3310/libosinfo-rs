// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Filter;
use List;
use ProductList;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct OsList(Object<ffi::OsinfoOsList, ffi::OsinfoOsListClass>): ProductList, List;

    match fn {
        get_type => || ffi::osinfo_oslist_get_type(),
    }
}

impl OsList {
    pub fn new() -> OsList {
        unsafe {
            from_glib_full(ffi::osinfo_oslist_new())
        }
    }
}

impl Default for OsList {
    fn default() -> Self {
        Self::new()
    }
}

pub trait OsListExt {
    fn new_copy(&self) -> Option<OsList>;

    fn new_filtered<P: IsA<Filter>>(&self, filter: &P) -> Option<OsList>;

    fn new_intersection(&self, sourceTwo: &OsList) -> Option<OsList>;

    fn new_union(&self, sourceTwo: &OsList) -> Option<OsList>;
}

impl<O: IsA<OsList>> OsListExt for O {
    fn new_copy(&self) -> Option<OsList> {
        unsafe {
            from_glib_full(ffi::osinfo_oslist_new_copy(self.to_glib_none().0))
        }
    }

    fn new_filtered<P: IsA<Filter>>(&self, filter: &P) -> Option<OsList> {
        unsafe {
            from_glib_full(ffi::osinfo_oslist_new_filtered(self.to_glib_none().0, filter.to_glib_none().0))
        }
    }

    fn new_intersection(&self, sourceTwo: &OsList) -> Option<OsList> {
        unsafe {
            from_glib_full(ffi::osinfo_oslist_new_intersection(self.to_glib_none().0, sourceTwo.to_glib_none().0))
        }
    }

    fn new_union(&self, sourceTwo: &OsList) -> Option<OsList> {
        unsafe {
            from_glib_full(ffi::osinfo_oslist_new_union(self.to_glib_none().0, sourceTwo.to_glib_none().0))
        }
    }
}
