// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Entity;
use ProductList;
use ProductRelationship;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Product(Object<ffi::OsinfoProduct, ffi::OsinfoProductClass>): Entity;

    match fn {
        get_type => || ffi::osinfo_product_get_type(),
    }
}

pub trait ProductExt {
    fn add_related<P: IsA<Product>>(&self, relshp: ProductRelationship, otherproduct: &P);

    fn get_codename(&self) -> Option<String>;

    fn get_eol_date(&self) -> Option<glib::Date>;

    fn get_eol_date_string(&self) -> Option<String>;

    fn get_logo(&self) -> Option<String>;

    fn get_name(&self) -> Option<String>;

    fn get_related(&self, relshp: ProductRelationship) -> Option<ProductList>;

    fn get_release_date(&self) -> Option<glib::Date>;

    fn get_release_date_string(&self) -> Option<String>;

    fn get_short_id(&self) -> Option<String>;

    fn get_vendor(&self) -> Option<String>;

    fn get_version(&self) -> Option<String>;

    fn connect_property_codename_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_logo_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_short_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vendor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Product> + IsA<glib::object::Object>> ProductExt for O {
    fn add_related<P: IsA<Product>>(&self, relshp: ProductRelationship, otherproduct: &P) {
        unsafe {
            ffi::osinfo_product_add_related(self.to_glib_none().0, relshp.to_glib(), otherproduct.to_glib_none().0);
        }
    }

    fn get_codename(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_codename(self.to_glib_none().0))
        }
    }

    fn get_eol_date(&self) -> Option<glib::Date> {
        unsafe {
            from_glib_full(ffi::osinfo_product_get_eol_date(self.to_glib_none().0))
        }
    }

    fn get_eol_date_string(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_eol_date_string(self.to_glib_none().0))
        }
    }

    fn get_logo(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_logo(self.to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_name(self.to_glib_none().0))
        }
    }

    fn get_related(&self, relshp: ProductRelationship) -> Option<ProductList> {
        unsafe {
            from_glib_full(ffi::osinfo_product_get_related(self.to_glib_none().0, relshp.to_glib()))
        }
    }

    fn get_release_date(&self) -> Option<glib::Date> {
        unsafe {
            from_glib_full(ffi::osinfo_product_get_release_date(self.to_glib_none().0))
        }
    }

    fn get_release_date_string(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_release_date_string(self.to_glib_none().0))
        }
    }

    fn get_short_id(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_short_id(self.to_glib_none().0))
        }
    }

    fn get_vendor(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_vendor(self.to_glib_none().0))
        }
    }

    fn get_version(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_version(self.to_glib_none().0))
        }
    }

    fn connect_property_codename_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::codename",
                transmute(notify_codename_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_logo_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::logo",
                transmute(notify_logo_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::name",
                transmute(notify_name_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_short_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::short-id",
                transmute(notify_short_id_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_vendor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::vendor",
                transmute(notify_vendor_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::version",
                transmute(notify_version_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_codename_trampoline<P>(this: *mut ffi::OsinfoProduct, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Product> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Product::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_logo_trampoline<P>(this: *mut ffi::OsinfoProduct, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Product> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Product::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_name_trampoline<P>(this: *mut ffi::OsinfoProduct, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Product> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Product::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_short_id_trampoline<P>(this: *mut ffi::OsinfoProduct, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Product> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Product::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_vendor_trampoline<P>(this: *mut ffi::OsinfoProduct, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Product> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Product::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_version_trampoline<P>(this: *mut ffi::OsinfoProduct, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Product> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Product::from_glib_borrow(this).downcast_unchecked())
}
