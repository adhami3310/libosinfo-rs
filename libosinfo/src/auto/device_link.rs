// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{Device, Entity};
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "OsinfoDeviceLink")]
    pub struct DeviceLink(Object<ffi::OsinfoDeviceLink, ffi::OsinfoDeviceLinkClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_devicelink_get_type(),
    }
}

impl DeviceLink {
    pub const NONE: Option<&'static DeviceLink> = None;

    #[doc(alias = "osinfo_devicelink_new")]
    pub fn new(target: &impl IsA<Device>) -> DeviceLink {
        skip_assert_initialized!();
        unsafe { from_glib_full(ffi::osinfo_devicelink_new(target.as_ref().to_glib_none().0)) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`DeviceLink`] objects.
    ///
    /// This method returns an instance of [`DeviceLinkBuilder`](crate::builders::DeviceLinkBuilder) which can be used to create [`DeviceLink`] objects.
    pub fn builder() -> DeviceLinkBuilder {
        DeviceLinkBuilder::new()
    }
}

impl Default for DeviceLink {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`DeviceLink`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DeviceLinkBuilder {
    builder: glib::object::ObjectBuilder<'static, DeviceLink>,
}

impl DeviceLinkBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn target(self, target: &impl IsA<Device>) -> Self {
        Self {
            builder: self.builder.property("target", target.clone().upcast()),
        }
    }

    pub fn id(self, id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("id", id.into()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`DeviceLink`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> DeviceLink {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::DeviceLink>> Sealed for T {}
}

pub trait DeviceLinkExt: IsA<DeviceLink> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_devicelink_get_driver")]
    #[doc(alias = "get_driver")]
    fn driver(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_devicelink_get_driver(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_devicelink_get_target")]
    #[doc(alias = "get_target")]
    fn target(&self) -> Device {
        unsafe {
            from_glib_none(ffi::osinfo_devicelink_get_target(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl<O: IsA<DeviceLink>> DeviceLinkExt for O {}

impl fmt::Display for DeviceLink {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DeviceLink")
    }
}
