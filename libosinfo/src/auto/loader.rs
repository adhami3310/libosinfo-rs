// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::Db;
use glib::{prelude::*, translate::*};
use std::{fmt, ptr};

glib::wrapper! {
    #[doc(alias = "OsinfoLoader")]
    pub struct Loader(Object<ffi::OsinfoLoader, ffi::OsinfoLoaderClass>);

    match fn {
        type_ => || ffi::osinfo_loader_get_type(),
    }
}

impl Loader {
    pub const NONE: Option<&'static Loader> = None;

    #[doc(alias = "osinfo_loader_new")]
    pub fn new() -> Loader {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_loader_new()) }
    }
}

impl Default for Loader {
    fn default() -> Self {
        Self::new()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Loader>> Sealed for T {}
}

pub trait LoaderExt: IsA<Loader> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_loader_get_db")]
    #[doc(alias = "get_db")]
    fn db(&self) -> Db {
        unsafe { from_glib_none(ffi::osinfo_loader_get_db(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_loader_process_default_path")]
    fn process_default_path(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            ffi::osinfo_loader_process_default_path(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "osinfo_loader_process_local_path")]
    fn process_local_path(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            ffi::osinfo_loader_process_local_path(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "osinfo_loader_process_path")]
    fn process_path(&self, path: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            ffi::osinfo_loader_process_path(
                self.as_ref().to_glib_none().0,
                path.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "osinfo_loader_process_system_path")]
    fn process_system_path(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            ffi::osinfo_loader_process_system_path(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "osinfo_loader_process_uri")]
    fn process_uri(&self, uri: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            ffi::osinfo_loader_process_uri(
                self.as_ref().to_glib_none().0,
                uri.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "osinfo_loader_process_user_path")]
    fn process_user_path(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            ffi::osinfo_loader_process_user_path(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl<O: IsA<Loader>> LoaderExt for O {}

impl fmt::Display for Loader {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Loader")
    }
}
