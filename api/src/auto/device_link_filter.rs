// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Filter;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DeviceLinkFilter(Object<ffi::OsinfoDeviceLinkFilter, ffi::OsinfoDeviceLinkFilterClass>): Filter;

    match fn {
        get_type => || ffi::osinfo_devicelinkfilter_get_type(),
    }
}

impl DeviceLinkFilter {
    pub fn new<P: IsA<Filter>>(filter: &P) -> DeviceLinkFilter {
        unsafe {
            from_glib_full(ffi::osinfo_devicelinkfilter_new(filter.to_glib_none().0))
        }
    }
}

pub trait DeviceLinkFilterExt {
    fn get_target_filter(&self) -> Option<Filter>;

    fn connect_property_target_filter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DeviceLinkFilter> + IsA<glib::object::Object>> DeviceLinkFilterExt for O {
    fn get_target_filter(&self) -> Option<Filter> {
        unsafe {
            from_glib_none(ffi::osinfo_devicelinkfilter_get_target_filter(self.to_glib_none().0))
        }
    }

    fn connect_property_target_filter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::target-filter",
                transmute(notify_target_filter_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_target_filter_trampoline<P>(this: *mut ffi::OsinfoDeviceLinkFilter, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DeviceLinkFilter> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceLinkFilter::from_glib_borrow(this).downcast_unchecked())
}
