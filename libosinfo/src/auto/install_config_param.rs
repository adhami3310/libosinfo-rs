// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{Datamap, Entity, InstallConfigParamPolicy};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "OsinfoInstallConfigParam")]
    pub struct InstallConfigParam(Object<ffi::OsinfoInstallConfigParam, ffi::OsinfoInstallConfigParamClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_install_config_param_get_type(),
    }
}

impl InstallConfigParam {
    pub const NONE: Option<&'static InstallConfigParam> = None;

    #[doc(alias = "osinfo_install_config_param_new")]
    pub fn new(name: &str) -> InstallConfigParam {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_install_config_param_new(name.to_glib_none().0)) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`InstallConfigParam`] objects.
    ///
    /// This method returns an instance of [`InstallConfigParamBuilder`](crate::builders::InstallConfigParamBuilder) which can be used to create [`InstallConfigParam`] objects.
    pub fn builder() -> InstallConfigParamBuilder {
        InstallConfigParamBuilder::new()
    }
}

impl Default for InstallConfigParam {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

impl fmt::Display for InstallConfigParam {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str(&InstallConfigParamExt::name(self))
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`InstallConfigParam`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct InstallConfigParamBuilder {
    builder: glib::object::ObjectBuilder<'static, InstallConfigParam>,
}

impl InstallConfigParamBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    pub fn value_map(self, value_map: &impl IsA<Datamap>) -> Self {
        Self {
            builder: self
                .builder
                .property("value-map", value_map.clone().upcast()),
        }
    }

    pub fn id(self, id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("id", id.into()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`InstallConfigParam`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> InstallConfigParam {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::InstallConfigParam>> Sealed for T {}
}

pub trait InstallConfigParamExt: IsA<InstallConfigParam> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_install_config_param_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_param_get_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_install_config_param_get_policy")]
    #[doc(alias = "get_policy")]
    fn policy(&self) -> InstallConfigParamPolicy {
        unsafe {
            from_glib(ffi::osinfo_install_config_param_get_policy(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_install_config_param_get_value_map")]
    #[doc(alias = "get_value_map")]
    fn value_map(&self) -> Datamap {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_param_get_value_map(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_install_config_param_is_optional")]
    fn is_optional(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_config_param_is_optional(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_install_config_param_is_required")]
    fn is_required(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_config_param_is_required(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_install_config_param_set_value_map")]
    fn set_value_map(&self, datamap: &impl IsA<Datamap>) {
        unsafe {
            ffi::osinfo_install_config_param_set_value_map(
                self.as_ref().to_glib_none().0,
                datamap.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "policy")]
    fn connect_policy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_policy_trampoline<
            P: IsA<InstallConfigParam>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::OsinfoInstallConfigParam,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(InstallConfigParam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::policy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_policy_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "value-map")]
    fn connect_value_map_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_value_map_trampoline<
            P: IsA<InstallConfigParam>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::OsinfoInstallConfigParam,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(InstallConfigParam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::value-map\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_value_map_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<InstallConfigParam>> InstallConfigParamExt for O {}
