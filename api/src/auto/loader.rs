// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Db;
use Error;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Loader(Object<ffi::OsinfoLoader, ffi::OsinfoLoaderClass>);

    match fn {
        get_type => || ffi::osinfo_loader_get_type(),
    }
}

impl Loader {
    pub fn new() -> Loader {
        unsafe {
            from_glib_full(ffi::osinfo_loader_new())
        }
    }
}

impl Default for Loader {
    fn default() -> Self {
        Self::new()
    }
}

pub trait LoaderExt {
    fn get_db(&self) -> Option<Db>;

    fn process_default_path(&self) -> Result<(), Error>;

    fn process_local_path(&self) -> Result<(), Error>;

    fn process_path(&self, path: &str) -> Result<(), Error>;

    fn process_system_path(&self) -> Result<(), Error>;

    fn process_uri(&self, uri: &str) -> Result<(), Error>;

    fn process_user_path(&self) -> Result<(), Error>;
}

impl<O: IsA<Loader>> LoaderExt for O {
    fn get_db(&self) -> Option<Db> {
        unsafe {
            from_glib_none(ffi::osinfo_loader_get_db(self.to_glib_none().0))
        }
    }

    fn process_default_path(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::osinfo_loader_process_default_path(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn process_local_path(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::osinfo_loader_process_local_path(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn process_path(&self, path: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::osinfo_loader_process_path(self.to_glib_none().0, path.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn process_system_path(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::osinfo_loader_process_system_path(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn process_uri(&self, uri: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::osinfo_loader_process_uri(self.to_glib_none().0, uri.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn process_user_path(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::osinfo_loader_process_user_path(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }
}
