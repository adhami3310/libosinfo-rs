// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Entity;
use Filter;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct List(Object<ffi::OsinfoList, ffi::OsinfoListClass>);

    match fn {
        get_type => || ffi::osinfo_list_get_type(),
    }
}

pub trait ListExt {
    fn add<P: IsA<Entity>>(&self, entity: &P);

    fn add_all<P: IsA<List>>(&self, source: &P);

    fn add_filtered<P: IsA<List>, Q: IsA<Filter>>(&self, source: &P, filter: &Q);

    fn add_intersection<P: IsA<List>, Q: IsA<List>>(&self, sourceOne: &P, sourceTwo: &Q);

    fn add_union<P: IsA<List>, Q: IsA<List>>(&self, sourceOne: &P, sourceTwo: &Q);

    fn find_by_id(&self, id: &str) -> Option<Entity>;

    fn get_element_type(&self) -> glib::types::Type;

    fn get_elements(&self) -> Vec<Entity>;

    fn get_length(&self) -> i32;

    fn get_nth(&self, idx: i32) -> Option<Entity>;

    fn new_copy(&self) -> Option<List>;

    fn new_filtered<P: IsA<Filter>>(&self, filter: &P) -> Option<List>;

    fn new_intersection<P: IsA<List>>(&self, sourceTwo: &P) -> Option<List>;

    fn new_union<P: IsA<List>>(&self, sourceTwo: &P) -> Option<List>;

    fn connect_property_element_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<List> + IsA<glib::object::Object>> ListExt for O {
    fn add<P: IsA<Entity>>(&self, entity: &P) {
        unsafe {
            ffi::osinfo_list_add(self.to_glib_none().0, entity.to_glib_none().0);
        }
    }

    fn add_all<P: IsA<List>>(&self, source: &P) {
        unsafe {
            ffi::osinfo_list_add_all(self.to_glib_none().0, source.to_glib_none().0);
        }
    }

    fn add_filtered<P: IsA<List>, Q: IsA<Filter>>(&self, source: &P, filter: &Q) {
        unsafe {
            ffi::osinfo_list_add_filtered(self.to_glib_none().0, source.to_glib_none().0, filter.to_glib_none().0);
        }
    }

    fn add_intersection<P: IsA<List>, Q: IsA<List>>(&self, sourceOne: &P, sourceTwo: &Q) {
        unsafe {
            ffi::osinfo_list_add_intersection(self.to_glib_none().0, sourceOne.to_glib_none().0, sourceTwo.to_glib_none().0);
        }
    }

    fn add_union<P: IsA<List>, Q: IsA<List>>(&self, sourceOne: &P, sourceTwo: &Q) {
        unsafe {
            ffi::osinfo_list_add_union(self.to_glib_none().0, sourceOne.to_glib_none().0, sourceTwo.to_glib_none().0);
        }
    }

    fn find_by_id(&self, id: &str) -> Option<Entity> {
        unsafe {
            from_glib_none(ffi::osinfo_list_find_by_id(self.to_glib_none().0, id.to_glib_none().0))
        }
    }

    fn get_element_type(&self) -> glib::types::Type {
        unsafe {
            from_glib(ffi::osinfo_list_get_element_type(self.to_glib_none().0))
        }
    }

    fn get_elements(&self) -> Vec<Entity> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_list_get_elements(self.to_glib_none().0))
        }
    }

    fn get_length(&self) -> i32 {
        unsafe {
            ffi::osinfo_list_get_length(self.to_glib_none().0)
        }
    }

    fn get_nth(&self, idx: i32) -> Option<Entity> {
        unsafe {
            from_glib_none(ffi::osinfo_list_get_nth(self.to_glib_none().0, idx))
        }
    }

    fn new_copy(&self) -> Option<List> {
        unsafe {
            from_glib_full(ffi::osinfo_list_new_copy(self.to_glib_none().0))
        }
    }

    fn new_filtered<P: IsA<Filter>>(&self, filter: &P) -> Option<List> {
        unsafe {
            from_glib_full(ffi::osinfo_list_new_filtered(self.to_glib_none().0, filter.to_glib_none().0))
        }
    }

    fn new_intersection<P: IsA<List>>(&self, sourceTwo: &P) -> Option<List> {
        unsafe {
            from_glib_full(ffi::osinfo_list_new_intersection(self.to_glib_none().0, sourceTwo.to_glib_none().0))
        }
    }

    fn new_union<P: IsA<List>>(&self, sourceTwo: &P) -> Option<List> {
        unsafe {
            from_glib_full(ffi::osinfo_list_new_union(self.to_glib_none().0, sourceTwo.to_glib_none().0))
        }
    }

    fn connect_property_element_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::element-type",
                transmute(notify_element_type_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_element_type_trampoline<P>(this: *mut ffi::OsinfoList, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<List> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&List::from_glib_borrow(this).downcast_unchecked())
}
