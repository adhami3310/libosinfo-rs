// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{Entity, ProductList, ProductRelationship};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "OsinfoProduct")]
    pub struct Product(Object<ffi::OsinfoProduct, ffi::OsinfoProductClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_product_get_type(),
    }
}

impl Product {
    pub const NONE: Option<&'static Product> = None;
}

impl fmt::Display for Product {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str(&ProductExt::name(self))
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Product>> Sealed for T {}
}

pub trait ProductExt: IsA<Product> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_product_add_related")]
    fn add_related(&self, relshp: ProductRelationship, otherproduct: &impl IsA<Product>) {
        unsafe {
            ffi::osinfo_product_add_related(
                self.as_ref().to_glib_none().0,
                relshp.into_glib(),
                otherproduct.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_product_get_codename")]
    #[doc(alias = "get_codename")]
    fn codename(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_codename(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_product_get_eol_date")]
    #[doc(alias = "get_eol_date")]
    fn eol_date(&self) -> glib::Date {
        unsafe {
            from_glib_full(ffi::osinfo_product_get_eol_date(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_product_get_eol_date_string")]
    #[doc(alias = "get_eol_date_string")]
    fn eol_date_string(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_eol_date_string(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_product_get_logo")]
    #[doc(alias = "get_logo")]
    fn logo(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::osinfo_product_get_logo(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_product_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::osinfo_product_get_name(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_product_get_related")]
    #[doc(alias = "get_related")]
    fn related(&self, relshp: ProductRelationship) -> ProductList {
        unsafe {
            from_glib_full(ffi::osinfo_product_get_related(
                self.as_ref().to_glib_none().0,
                relshp.into_glib(),
            ))
        }
    }

    #[doc(alias = "osinfo_product_get_release_date")]
    #[doc(alias = "get_release_date")]
    fn release_date(&self) -> glib::Date {
        unsafe {
            from_glib_full(ffi::osinfo_product_get_release_date(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_product_get_release_date_string")]
    #[doc(alias = "get_release_date_string")]
    fn release_date_string(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_release_date_string(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_product_get_short_id")]
    #[doc(alias = "get_short_id")]
    fn short_id(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_short_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    #[doc(alias = "osinfo_product_get_short_id_list")]
    #[doc(alias = "get_short_id_list")]
    fn short_id_list(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_product_get_short_id_list(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_product_get_vendor")]
    #[doc(alias = "get_vendor")]
    fn vendor(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_vendor(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_product_get_version")]
    #[doc(alias = "get_version")]
    fn version(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_product_get_version(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "codename")]
    fn connect_codename_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_codename_trampoline<P: IsA<Product>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoProduct,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Product::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::codename\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_codename_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "logo")]
    fn connect_logo_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_logo_trampoline<P: IsA<Product>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoProduct,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Product::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::logo\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_logo_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<Product>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoProduct,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Product::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "short-id")]
    fn connect_short_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_short_id_trampoline<P: IsA<Product>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoProduct,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Product::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::short-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_short_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "vendor")]
    fn connect_vendor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vendor_trampoline<P: IsA<Product>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoProduct,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Product::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vendor\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vendor_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "version")]
    fn connect_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_version_trampoline<P: IsA<Product>, F: Fn(&P) + 'static>(
            this: *mut ffi::OsinfoProduct,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Product::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::version\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_version_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Product>> ProductExt for O {}
