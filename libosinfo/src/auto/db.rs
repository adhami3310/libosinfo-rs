// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT
#![allow(deprecated)]

use crate::{
    Datamap, DatamapList, Deployment, DeploymentList, Device, DeviceList, InstallScript,
    InstallScriptList, Media, Os, OsList, Platform, PlatformList, ProductRelationship, Tree,
};
#[cfg(feature = "v1_10")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
use crate::{MediaList, TreeList};
use glib::{prelude::*, translate::*};
use std::{fmt, ptr};

glib::wrapper! {
    #[doc(alias = "OsinfoDb")]
    pub struct Db(Object<ffi::OsinfoDb, ffi::OsinfoDbClass>);

    match fn {
        type_ => || ffi::osinfo_db_get_type(),
    }
}

impl Db {
    pub const NONE: Option<&'static Db> = None;

    #[doc(alias = "osinfo_db_new")]
    pub fn new() -> Db {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_db_new()) }
    }
}

impl Default for Db {
    fn default() -> Self {
        Self::new()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Db>> Sealed for T {}
}

pub trait DbExt: IsA<Db> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_db_add_datamap")]
    fn add_datamap(&self, datamap: &impl IsA<Datamap>) {
        unsafe {
            ffi::osinfo_db_add_datamap(
                self.as_ref().to_glib_none().0,
                datamap.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_db_add_deployment")]
    fn add_deployment(&self, deployment: &impl IsA<Deployment>) {
        unsafe {
            ffi::osinfo_db_add_deployment(
                self.as_ref().to_glib_none().0,
                deployment.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_db_add_device")]
    fn add_device(&self, device: &impl IsA<Device>) {
        unsafe {
            ffi::osinfo_db_add_device(
                self.as_ref().to_glib_none().0,
                device.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_db_add_install_script")]
    fn add_install_script(&self, script: &impl IsA<InstallScript>) {
        unsafe {
            ffi::osinfo_db_add_install_script(
                self.as_ref().to_glib_none().0,
                script.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_db_add_os")]
    fn add_os(&self, os: &impl IsA<Os>) {
        unsafe {
            ffi::osinfo_db_add_os(self.as_ref().to_glib_none().0, os.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "osinfo_db_add_platform")]
    fn add_platform(&self, platform: &impl IsA<Platform>) {
        unsafe {
            ffi::osinfo_db_add_platform(
                self.as_ref().to_glib_none().0,
                platform.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_db_find_deployment")]
    fn find_deployment(&self, os: &impl IsA<Os>, platform: &impl IsA<Platform>) -> Deployment {
        unsafe {
            from_glib_none(ffi::osinfo_db_find_deployment(
                self.as_ref().to_glib_none().0,
                os.as_ref().to_glib_none().0,
                platform.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_get_datamap")]
    #[doc(alias = "get_datamap")]
    fn datamap(&self, id: &str) -> Datamap {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_datamap(
                self.as_ref().to_glib_none().0,
                id.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_get_datamap_list")]
    #[doc(alias = "get_datamap_list")]
    fn datamap_list(&self) -> DatamapList {
        unsafe {
            from_glib_full(ffi::osinfo_db_get_datamap_list(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_get_deployment")]
    #[doc(alias = "get_deployment")]
    fn deployment(&self, id: &str) -> Deployment {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_deployment(
                self.as_ref().to_glib_none().0,
                id.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_get_deployment_list")]
    #[doc(alias = "get_deployment_list")]
    fn deployment_list(&self) -> DeploymentList {
        unsafe {
            from_glib_full(ffi::osinfo_db_get_deployment_list(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_get_device")]
    #[doc(alias = "get_device")]
    fn device(&self, id: &str) -> Device {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_device(
                self.as_ref().to_glib_none().0,
                id.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_get_device_list")]
    #[doc(alias = "get_device_list")]
    fn device_list(&self) -> DeviceList {
        unsafe {
            from_glib_full(ffi::osinfo_db_get_device_list(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_get_install_script")]
    #[doc(alias = "get_install_script")]
    fn install_script(&self, id: &str) -> InstallScript {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_install_script(
                self.as_ref().to_glib_none().0,
                id.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_get_install_script_list")]
    #[doc(alias = "get_install_script_list")]
    fn install_script_list(&self) -> InstallScriptList {
        unsafe {
            from_glib_full(ffi::osinfo_db_get_install_script_list(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_get_os")]
    #[doc(alias = "get_os")]
    fn os(&self, id: &str) -> Os {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_os(
                self.as_ref().to_glib_none().0,
                id.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_get_os_list")]
    #[doc(alias = "get_os_list")]
    fn os_list(&self) -> OsList {
        unsafe { from_glib_full(ffi::osinfo_db_get_os_list(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "osinfo_db_get_platform")]
    #[doc(alias = "get_platform")]
    fn platform(&self, id: &str) -> Platform {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_platform(
                self.as_ref().to_glib_none().0,
                id.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_get_platform_list")]
    #[doc(alias = "get_platform_list")]
    fn platform_list(&self) -> PlatformList {
        unsafe {
            from_glib_full(ffi::osinfo_db_get_platform_list(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v1_6", deprecated = "Since 1.6")]
    #[allow(deprecated)]
    #[doc(alias = "osinfo_db_guess_os_from_tree")]
    fn guess_os_from_tree(&self, tree: &impl IsA<Tree>) -> (Os, Tree) {
        unsafe {
            let mut matched_tree = ptr::null_mut();
            let ret = from_glib_none(ffi::osinfo_db_guess_os_from_tree(
                self.as_ref().to_glib_none().0,
                tree.as_ref().to_glib_none().0,
                &mut matched_tree,
            ));
            (ret, from_glib_none(matched_tree))
        }
    }

    #[doc(alias = "osinfo_db_identify_media")]
    fn identify_media(&self, media: &impl IsA<Media>) -> bool {
        unsafe {
            from_glib(ffi::osinfo_db_identify_media(
                self.as_ref().to_glib_none().0,
                media.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
    #[doc(alias = "osinfo_db_identify_medialist")]
    fn identify_medialist(&self, media: &impl IsA<Media>) -> MediaList {
        unsafe {
            from_glib_full(ffi::osinfo_db_identify_medialist(
                self.as_ref().to_glib_none().0,
                media.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[doc(alias = "osinfo_db_identify_tree")]
    fn identify_tree(&self, tree: &impl IsA<Tree>) -> bool {
        unsafe {
            from_glib(ffi::osinfo_db_identify_tree(
                self.as_ref().to_glib_none().0,
                tree.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v1_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
    #[doc(alias = "osinfo_db_identify_treelist")]
    fn identify_treelist(&self, tree: &impl IsA<Tree>) -> TreeList {
        unsafe {
            from_glib_full(ffi::osinfo_db_identify_treelist(
                self.as_ref().to_glib_none().0,
                tree.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_db_unique_values_for_os_relationship")]
    fn unique_values_for_os_relationship(&self, relshp: ProductRelationship) -> OsList {
        unsafe {
            from_glib_full(ffi::osinfo_db_unique_values_for_os_relationship(
                self.as_ref().to_glib_none().0,
                relshp.into_glib(),
            ))
        }
    }

    #[doc(alias = "osinfo_db_unique_values_for_platform_relationship")]
    fn unique_values_for_platform_relationship(&self, relshp: ProductRelationship) -> PlatformList {
        unsafe {
            from_glib_full(ffi::osinfo_db_unique_values_for_platform_relationship(
                self.as_ref().to_glib_none().0,
                relshp.into_glib(),
            ))
        }
    }

    #[doc(alias = "osinfo_db_unique_values_for_property_in_deployment")]
    fn unique_values_for_property_in_deployment(&self, propName: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(
                ffi::osinfo_db_unique_values_for_property_in_deployment(
                    self.as_ref().to_glib_none().0,
                    propName.to_glib_none().0,
                ),
            )
        }
    }

    #[doc(alias = "osinfo_db_unique_values_for_property_in_device")]
    fn unique_values_for_property_in_device(&self, propName: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(
                ffi::osinfo_db_unique_values_for_property_in_device(
                    self.as_ref().to_glib_none().0,
                    propName.to_glib_none().0,
                ),
            )
        }
    }

    #[doc(alias = "osinfo_db_unique_values_for_property_in_os")]
    fn unique_values_for_property_in_os(&self, propName: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(
                ffi::osinfo_db_unique_values_for_property_in_os(
                    self.as_ref().to_glib_none().0,
                    propName.to_glib_none().0,
                ),
            )
        }
    }

    #[doc(alias = "osinfo_db_unique_values_for_property_in_platform")]
    fn unique_values_for_property_in_platform(&self, propName: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(
                ffi::osinfo_db_unique_values_for_property_in_platform(
                    self.as_ref().to_glib_none().0,
                    propName.to_glib_none().0,
                ),
            )
        }
    }
}

impl<O: IsA<Db>> DbExt for O {}

impl fmt::Display for Db {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Db")
    }
}
