// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Entity;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Device(Object<ffi::OsinfoDevice, ffi::OsinfoDeviceClass>): Entity;

    match fn {
        get_type => || ffi::osinfo_device_get_type(),
    }
}

impl Device {
    pub fn new(id: &str) -> Device {
        unsafe {
            from_glib_full(ffi::osinfo_device_new(id.to_glib_none().0))
        }
    }
}

pub trait DeviceExt {
    fn get_bus_type(&self) -> Option<String>;

    fn get_class(&self) -> Option<String>;

    fn get_name(&self) -> Option<String>;

    fn get_product(&self) -> Option<String>;

    fn get_product_id(&self) -> Option<String>;

    fn get_subsystem(&self) -> Option<String>;

    fn get_vendor(&self) -> Option<String>;

    fn get_vendor_id(&self) -> Option<String>;
}

impl<O: IsA<Device>> DeviceExt for O {
    fn get_bus_type(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_bus_type(self.to_glib_none().0))
        }
    }

    fn get_class(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_class(self.to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_name(self.to_glib_none().0))
        }
    }

    fn get_product(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_product(self.to_glib_none().0))
        }
    }

    fn get_product_id(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_product_id(self.to_glib_none().0))
        }
    }

    fn get_subsystem(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_subsystem(self.to_glib_none().0))
        }
    }

    fn get_vendor(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_vendor(self.to_glib_none().0))
        }
    }

    fn get_vendor_id(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_device_get_vendor_id(self.to_glib_none().0))
        }
    }
}
