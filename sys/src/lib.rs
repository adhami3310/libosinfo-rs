// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals)]

extern crate libc;
#[macro_use] extern crate bitflags;
extern crate glib_sys as glib;
extern crate gobject_sys as gobject;
extern crate gio_sys as gio;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType, Volatile};

// Enums
pub type OsinfoDeviceDriverSigningReq = c_int;
pub const OSINFO_DEVICE_DRIVER_SIGNING_REQ_NONE: OsinfoDeviceDriverSigningReq = 0;
pub const OSINFO_DEVICE_DRIVER_SIGNING_REQ_STRICT: OsinfoDeviceDriverSigningReq = 1;
pub const OSINFO_DEVICE_DRIVER_SIGNING_REQ_WARN: OsinfoDeviceDriverSigningReq = 2;

pub type OsinfoInstallConfigParamPolicy = c_int;
pub const OSINFO_INSTALL_CONFIG_PARAM_POLICY_NONE: OsinfoInstallConfigParamPolicy = 0;
pub const OSINFO_INSTALL_CONFIG_PARAM_POLICY_REQUIRED: OsinfoInstallConfigParamPolicy = 1;
pub const OSINFO_INSTALL_CONFIG_PARAM_POLICY_OPTIONAL: OsinfoInstallConfigParamPolicy = 2;

pub type OsinfoMediaError = c_int;
pub const OSINFO_MEDIA_ERROR_NO_DESCRIPTORS: OsinfoMediaError = 0;
pub const OSINFO_MEDIA_ERROR_NO_PVD: OsinfoMediaError = 1;
pub const OSINFO_MEDIA_ERROR_NO_SVD: OsinfoMediaError = 2;
pub const OSINFO_MEDIA_ERROR_INSUFFICIENT_METADATA: OsinfoMediaError = 3;
pub const OSINFO_MEDIA_ERROR_NOT_BOOTABLE: OsinfoMediaError = 4;

pub type OsinfoPathFormat = c_int;
pub const OSINFO_PATH_FORMAT_UNIX: OsinfoPathFormat = 0;
pub const OSINFO_PATH_FORMAT_DOS: OsinfoPathFormat = 1;

pub type OsinfoProductRelationship = c_int;
pub const OSINFO_PRODUCT_RELATIONSHIP_DERIVES_FROM: OsinfoProductRelationship = 0;
pub const OSINFO_PRODUCT_RELATIONSHIP_UPGRADES: OsinfoProductRelationship = 1;
pub const OSINFO_PRODUCT_RELATIONSHIP_CLONES: OsinfoProductRelationship = 2;

pub type OsinfoReleaseStatus = c_int;
pub const OSINFO_RELEASE_STATUS_RELEASED: OsinfoReleaseStatus = 0;
pub const OSINFO_RELEASE_STATUS_SNAPSHOT: OsinfoReleaseStatus = 1;
pub const OSINFO_RELEASE_STATUS_PRERELEASE: OsinfoReleaseStatus = 2;

// Constants
pub const OSINFO_ARCHITECTURE_ALL: *const c_char = b"all\0" as *const u8 as *const c_char;
pub const OSINFO_AVATAR_FORMAT_PROP_ALPHA: *const c_char = b"alpha\0" as *const u8 as *const c_char;
pub const OSINFO_AVATAR_FORMAT_PROP_HEIGHT: *const c_char = b"height\0" as *const u8 as *const c_char;
pub const OSINFO_AVATAR_FORMAT_PROP_MIME_TYPE: *const c_char = b"mime-type\0" as *const u8 as *const c_char;
pub const OSINFO_AVATAR_FORMAT_PROP_WIDTH: *const c_char = b"width\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICELINK_PROP_DRIVER: *const c_char = b"driver\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_DRIVER_PROP_ARCHITECTURE: *const c_char = b"arch\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_DRIVER_PROP_DEVICE: *const c_char = b"device\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_DRIVER_PROP_FILE: *const c_char = b"file\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_DRIVER_PROP_LOCATION: *const c_char = b"location\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_DRIVER_PROP_PRE_INSTALLABLE: *const c_char = b"pre-installable\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_DRIVER_PROP_SIGNED: *const c_char = b"signed\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_PROP_BUS_TYPE: *const c_char = b"bus-type\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_PROP_CLASS: *const c_char = b"class\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_PROP_NAME: *const c_char = b"name\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_PROP_PRODUCT: *const c_char = b"product\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_PROP_PRODUCT_ID: *const c_char = b"product-id\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_PROP_SUBSYSTEM: *const c_char = b"subsystem\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_PROP_VENDOR: *const c_char = b"vendor\0" as *const u8 as *const c_char;
pub const OSINFO_DEVICE_PROP_VENDOR_ID: *const c_char = b"vendor-id\0" as *const u8 as *const c_char;
pub const OSINFO_ENTITY_PROP_ID: *const c_char = b"id\0" as *const u8 as *const c_char;
pub const OSINFO_GIBIBYTES: c_int = 1073741824;
pub const OSINFO_INSTALL_CONFIG_PARAM_PROP_DATAMAP: *const c_char = b"value-map\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PARAM_PROP_NAME: *const c_char = b"name\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PARAM_PROP_POLICY: *const c_char = b"policy\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_ADMIN_PASSWORD: *const c_char = b"admin-password\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_AVATAR_DISK: *const c_char = b"avatar-disk\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_AVATAR_LOCATION: *const c_char = b"avatar-location\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_DRIVER_SIGNING: *const c_char = b"driver-signing\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_HARDWARE_ARCH: *const c_char = b"hardware-arch\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_HOSTNAME: *const c_char = b"hostname\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_L10N_KEYBOARD: *const c_char = b"l10n-keyboard\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_L10N_LANGUAGE: *const c_char = b"l10n-language\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_L10N_TIMEZONE: *const c_char = b"l10n-timezone\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_POST_INSTALL_DRIVERS_DISK: *const c_char = b"post-install-drivers-disk\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_POST_INSTALL_DRIVERS_LOCATION: *const c_char = b"post-install-drivers-location\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_PRE_INSTALL_DRIVERS_DISK: *const c_char = b"pre-install-drivers-disk\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_PRE_INSTALL_DRIVERS_LOCATION: *const c_char = b"pre-install-drivers-location\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_REG_LOGIN: *const c_char = b"reg-login\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_REG_PASSWORD: *const c_char = b"reg-password\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_REG_PRODUCTKEY: *const c_char = b"reg-product-key\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_SCRIPT_DISK: *const c_char = b"script-disk\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_TARGET_DISK: *const c_char = b"target-disk\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_USER_ADMIN: *const c_char = b"user-admin\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_USER_AUTOLOGIN: *const c_char = b"user-autologin\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_USER_LOGIN: *const c_char = b"user-login\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_USER_PASSWORD: *const c_char = b"user-password\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_CONFIG_PROP_USER_REALNAME: *const c_char = b"user-realname\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROFILE_DESKTOP: *const c_char = b"desktop\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROFILE_JEOS: *const c_char = b"jeos\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_CAN_POST_INSTALL_DRIVERS: *const c_char = b"can-post-install-drivers\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_CAN_PRE_INSTALL_DRIVERS: *const c_char = b"can-pre-install-drivers\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_EXPECTED_FILENAME: *const c_char = b"expected-filename\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_INJECTION_METHOD: *const c_char = b"injection-method\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_NEEDS_INTERNET: *const c_char = b"needs-internet\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_PATH_FORMAT: *const c_char = b"path-format\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_POST_INSTALL_DRIVERS_SIGNING_REQ: *const c_char = b"post-install-drivers-signing-req\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_PRE_INSTALL_DRIVERS_SIGNING_REQ: *const c_char = b"pre-install-drivers-signing-req\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_PRODUCT_KEY_FORMAT: *const c_char = b"product-key-format\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_PROFILE: *const c_char = b"profile\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_TEMPLATE_DATA: *const c_char = b"template-data\0" as *const u8 as *const c_char;
pub const OSINFO_INSTALL_SCRIPT_PROP_TEMPLATE_URI: *const c_char = b"template-uri\0" as *const u8 as *const c_char;
pub const OSINFO_KIBIBYTES: c_int = 1024;
pub const OSINFO_MAJOR_VERSION: c_int = 1;
pub const OSINFO_MEBIBYTES: c_int = 1048576;
pub const OSINFO_MEDIA_PROP_APPLICATION_ID: *const c_char = b"application-id\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_ARCHITECTURE: *const c_char = b"architecture\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_EJECT_AFTER_INSTALL: *const c_char = b"eject-after-install\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_INITRD: *const c_char = b"initrd\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_INSTALLER: *const c_char = b"installer\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_INSTALLER_REBOOTS: *const c_char = b"installer-reboots\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_KERNEL: *const c_char = b"kernel\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_LANG: *const c_char = b"l10n-language\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_LANG_MAP: *const c_char = b"l10n-language-map\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_LANG_REGEX: *const c_char = b"l10n-language-regex\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_LIVE: *const c_char = b"live\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_PUBLISHER_ID: *const c_char = b"publisher-id\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_SYSTEM_ID: *const c_char = b"system-id\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_URL: *const c_char = b"url\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_VARIANT: *const c_char = b"variant\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_VOLUME_ID: *const c_char = b"volume-id\0" as *const u8 as *const c_char;
pub const OSINFO_MEDIA_PROP_VOLUME_SIZE: *const c_char = b"volume-size\0" as *const u8 as *const c_char;
pub const OSINFO_MEGAHERTZ: c_int = 1000000;
pub const OSINFO_MICRO_VERSION: c_int = 0;
pub const OSINFO_MINOR_VERSION: c_int = 2;
pub const OSINFO_OS_PROP_DISTRO: *const c_char = b"distro\0" as *const u8 as *const c_char;
pub const OSINFO_OS_PROP_FAMILY: *const c_char = b"family\0" as *const u8 as *const c_char;
pub const OSINFO_OS_PROP_RELEASE_STATUS: *const c_char = b"release-status\0" as *const u8 as *const c_char;
pub const OSINFO_OS_VARIANT_PROP_NAME: *const c_char = b"name\0" as *const u8 as *const c_char;
pub const OSINFO_PRODUCT_PROP_CODENAME: *const c_char = b"codename\0" as *const u8 as *const c_char;
pub const OSINFO_PRODUCT_PROP_EOL_DATE: *const c_char = b"eol-date\0" as *const u8 as *const c_char;
pub const OSINFO_PRODUCT_PROP_LOGO: *const c_char = b"logo\0" as *const u8 as *const c_char;
pub const OSINFO_PRODUCT_PROP_NAME: *const c_char = b"name\0" as *const u8 as *const c_char;
pub const OSINFO_PRODUCT_PROP_RELEASE_DATE: *const c_char = b"release-date\0" as *const u8 as *const c_char;
pub const OSINFO_PRODUCT_PROP_SHORT_ID: *const c_char = b"short-id\0" as *const u8 as *const c_char;
pub const OSINFO_PRODUCT_PROP_VENDOR: *const c_char = b"vendor\0" as *const u8 as *const c_char;
pub const OSINFO_PRODUCT_PROP_VERSION: *const c_char = b"version\0" as *const u8 as *const c_char;
pub const OSINFO_RESOURCES_PROP_ARCHITECTURE: *const c_char = b"architecture\0" as *const u8 as *const c_char;
pub const OSINFO_RESOURCES_PROP_CPU: *const c_char = b"cpu\0" as *const u8 as *const c_char;
pub const OSINFO_RESOURCES_PROP_N_CPUS: *const c_char = b"n-cpus\0" as *const u8 as *const c_char;
pub const OSINFO_RESOURCES_PROP_RAM: *const c_char = b"ram\0" as *const u8 as *const c_char;
pub const OSINFO_RESOURCES_PROP_STORAGE: *const c_char = b"storage\0" as *const u8 as *const c_char;
pub const OSINFO_TREE_PROP_ARCHITECTURE: *const c_char = b"architecture\0" as *const u8 as *const c_char;
pub const OSINFO_TREE_PROP_BOOT_ISO: *const c_char = b"boot-iso\0" as *const u8 as *const c_char;
pub const OSINFO_TREE_PROP_INITRD: *const c_char = b"initrd\0" as *const u8 as *const c_char;
pub const OSINFO_TREE_PROP_KERNEL: *const c_char = b"kernel\0" as *const u8 as *const c_char;
pub const OSINFO_TREE_PROP_TREEINFO_ARCH: *const c_char = b"treeinfo-arch\0" as *const u8 as *const c_char;
pub const OSINFO_TREE_PROP_TREEINFO_FAMILY: *const c_char = b"treeinfo-family\0" as *const u8 as *const c_char;
pub const OSINFO_TREE_PROP_TREEINFO_VARIANT: *const c_char = b"treeinfo-variant\0" as *const u8 as *const c_char;
pub const OSINFO_TREE_PROP_TREEINFO_VERSION: *const c_char = b"treeinfo-version\0" as *const u8 as *const c_char;
pub const OSINFO_TREE_PROP_URL: *const c_char = b"url\0" as *const u8 as *const c_char;

// Flags
bitflags! {
    #[repr(C)]
    pub struct OsinfoInstallScriptInjectionMethod: c_uint {
        const CDROM = 1;
        const DISK = 2;
        const FLOPPY = 4;
        const INITRD = 8;
        const WEB = 16;
    }
}
pub const OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_CDROM: OsinfoInstallScriptInjectionMethod = OsinfoInstallScriptInjectionMethod::CDROM;
pub const OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_DISK: OsinfoInstallScriptInjectionMethod = OsinfoInstallScriptInjectionMethod::DISK;
pub const OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_FLOPPY: OsinfoInstallScriptInjectionMethod = OsinfoInstallScriptInjectionMethod::FLOPPY;
pub const OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_INITRD: OsinfoInstallScriptInjectionMethod = OsinfoInstallScriptInjectionMethod::INITRD;
pub const OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_WEB: OsinfoInstallScriptInjectionMethod = OsinfoInstallScriptInjectionMethod::WEB;

// Records
#[repr(C)]
pub struct OsinfoAvatarFormatClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoDatamapClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoDatamapListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoDatamapListPrivate(c_void);

#[repr(C)]
pub struct OsinfoDatamapPrivate(c_void);

#[repr(C)]
pub struct OsinfoDbClass {
    pub parent_class: gobject::GObjectClass,
}

#[repr(C)]
pub struct OsinfoDbPrivate(c_void);

#[repr(C)]
pub struct OsinfoDeploymentClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoDeploymentListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoDeploymentListPrivate(c_void);

#[repr(C)]
pub struct OsinfoDeploymentPrivate(c_void);

#[repr(C)]
pub struct OsinfoDeviceClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoDeviceDriverClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoDeviceDriverListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoDeviceDriverListPrivate(c_void);

#[repr(C)]
pub struct OsinfoDeviceDriverPrivate(c_void);

#[repr(C)]
pub struct OsinfoDeviceLinkClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoDeviceLinkFilterClass {
    pub parent_class: OsinfoFilterClass,
}

#[repr(C)]
pub struct OsinfoDeviceLinkFilterPrivate(c_void);

#[repr(C)]
pub struct OsinfoDeviceLinkListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoDeviceLinkListPrivate(c_void);

#[repr(C)]
pub struct OsinfoDeviceLinkPrivate(c_void);

#[repr(C)]
pub struct OsinfoDeviceListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoDeviceListPrivate(c_void);

#[repr(C)]
pub struct OsinfoDevicePrivate(c_void);

#[repr(C)]
pub struct OsinfoEntityClass {
    pub parent_class: gobject::GObjectClass,
}

#[repr(C)]
pub struct OsinfoEntityPrivate(c_void);

#[repr(C)]
pub struct OsinfoFilterClass {
    pub parent_class: gobject::GObjectClass,
    pub matches: Option<unsafe extern "C" fn(*mut OsinfoFilter, *mut OsinfoEntity) -> gboolean>,
}

#[repr(C)]
pub struct OsinfoFilterPrivate(c_void);

#[repr(C)]
pub struct OsinfoInstallConfigClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoInstallConfigParamClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoInstallConfigParamListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoInstallConfigParamListPrivate(c_void);

#[repr(C)]
pub struct OsinfoInstallConfigParamPrivate(c_void);

#[repr(C)]
pub struct OsinfoInstallConfigPrivate(c_void);

#[repr(C)]
pub struct OsinfoInstallScriptClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoInstallScriptListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoInstallScriptListPrivate(c_void);

#[repr(C)]
pub struct OsinfoInstallScriptPrivate(c_void);

#[repr(C)]
pub struct OsinfoListClass {
    pub parent_class: gobject::GObjectClass,
}

#[repr(C)]
pub struct OsinfoListPrivate(c_void);

#[repr(C)]
pub struct OsinfoLoaderClass {
    pub parent_class: gobject::GObjectClass,
}

#[repr(C)]
pub struct OsinfoLoaderPrivate(c_void);

#[repr(C)]
pub struct OsinfoMediaClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoMediaListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoMediaListPrivate(c_void);

#[repr(C)]
pub struct OsinfoMediaPrivate(c_void);

#[repr(C)]
pub struct OsinfoOsClass {
    pub parent_class: OsinfoProductClass,
}

#[repr(C)]
pub struct OsinfoOsListClass {
    pub parent_class: OsinfoProductListClass,
}

#[repr(C)]
pub struct OsinfoOsListPrivate(c_void);

#[repr(C)]
pub struct OsinfoOsPrivate(c_void);

#[repr(C)]
pub struct OsinfoOsVariantClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoOsVariantListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoOsVariantListPrivate(c_void);

#[repr(C)]
pub struct OsinfoOsVariantPrivate(c_void);

#[repr(C)]
pub struct OsinfoPlatformClass {
    pub parent_class: OsinfoProductClass,
}

#[repr(C)]
pub struct OsinfoPlatformListClass {
    pub parent_class: OsinfoProductListClass,
}

#[repr(C)]
pub struct OsinfoPlatformListPrivate(c_void);

#[repr(C)]
pub struct OsinfoPlatformPrivate(c_void);

#[repr(C)]
pub struct OsinfoProductClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoProductFilterClass {
    pub parent_class: OsinfoFilterClass,
}

#[repr(C)]
pub struct OsinfoProductFilterPrivate(c_void);

#[repr(C)]
pub struct OsinfoProductListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoProductListPrivate(c_void);

#[repr(C)]
pub struct OsinfoProductPrivate(c_void);

#[repr(C)]
pub struct OsinfoResourcesClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoResourcesListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoResourcesListPrivate(c_void);

#[repr(C)]
pub struct OsinfoResourcesPrivate(c_void);

#[repr(C)]
pub struct OsinfoTreeClass {
    pub parent_class: OsinfoEntityClass,
}

#[repr(C)]
pub struct OsinfoTreeListClass {
    pub parent_class: OsinfoListClass,
}

#[repr(C)]
pub struct OsinfoTreeListPrivate(c_void);

#[repr(C)]
pub struct OsinfoTreePrivate(c_void);

// Classes
#[repr(C)]
pub struct OsinfoAvatarFormat {
    pub parent_instance: OsinfoEntity,
}

#[repr(C)]
pub struct OsinfoDatamap {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoDatamapPrivate,
}

#[repr(C)]
pub struct OsinfoDatamapList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoDatamapListPrivate,
}

#[repr(C)]
pub struct OsinfoDb {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut OsinfoDbPrivate,
}

#[repr(C)]
pub struct OsinfoDeployment {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoDeploymentPrivate,
}

#[repr(C)]
pub struct OsinfoDeploymentList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoDeploymentListPrivate,
}

#[repr(C)]
pub struct OsinfoDevice {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoDevicePrivate,
}

#[repr(C)]
pub struct OsinfoDeviceDriver {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoDeviceDriverPrivate,
}

#[repr(C)]
pub struct OsinfoDeviceDriverList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoDeviceDriverListPrivate,
}

#[repr(C)]
pub struct OsinfoDeviceLink {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoDeviceLinkPrivate,
}

#[repr(C)]
pub struct OsinfoDeviceLinkFilter {
    pub parent_instance: OsinfoFilter,
    pub priv_: *mut OsinfoDeviceLinkFilterPrivate,
}

#[repr(C)]
pub struct OsinfoDeviceLinkList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoDeviceLinkListPrivate,
}

#[repr(C)]
pub struct OsinfoDeviceList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoDeviceListPrivate,
}

#[repr(C)]
pub struct OsinfoEntity {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut OsinfoEntityPrivate,
}

#[repr(C)]
pub struct OsinfoFilter {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut OsinfoFilterPrivate,
}

#[repr(C)]
pub struct OsinfoInstallConfig {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoInstallConfigPrivate,
}

#[repr(C)]
pub struct OsinfoInstallConfigParam {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoInstallConfigParamPrivate,
}

#[repr(C)]
pub struct OsinfoInstallConfigParamList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoInstallConfigParamListPrivate,
}

#[repr(C)]
pub struct OsinfoInstallScript {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoInstallScriptPrivate,
}

#[repr(C)]
pub struct OsinfoInstallScriptList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoInstallScriptListPrivate,
}

#[repr(C)]
pub struct OsinfoList {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut OsinfoListPrivate,
}

#[repr(C)]
pub struct OsinfoLoader {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut OsinfoLoaderPrivate,
}

#[repr(C)]
pub struct OsinfoMedia {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoMediaPrivate,
}

#[repr(C)]
pub struct OsinfoMediaList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoMediaListPrivate,
}

#[repr(C)]
pub struct OsinfoOs {
    pub parent_instance: OsinfoProduct,
    pub priv_: *mut OsinfoOsPrivate,
}

#[repr(C)]
pub struct OsinfoOsList {
    pub parent_instance: OsinfoProductList,
    pub priv_: *mut OsinfoOsListPrivate,
}

#[repr(C)]
pub struct OsinfoOsVariant {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoOsVariantPrivate,
}

#[repr(C)]
pub struct OsinfoOsVariantList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoOsVariantListPrivate,
}

#[repr(C)]
pub struct OsinfoPlatform {
    pub parent_instance: OsinfoProduct,
    pub priv_: *mut OsinfoPlatformPrivate,
}

#[repr(C)]
pub struct OsinfoPlatformList {
    pub parent_instance: OsinfoProductList,
    pub priv_: *mut OsinfoPlatformListPrivate,
}

#[repr(C)]
pub struct OsinfoProduct {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoProductPrivate,
}

#[repr(C)]
pub struct OsinfoProductFilter {
    pub parent_instance: OsinfoFilter,
    pub priv_: *mut OsinfoProductFilterPrivate,
}

#[repr(C)]
pub struct OsinfoProductList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoProductListPrivate,
}

#[repr(C)]
pub struct OsinfoResources {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoResourcesPrivate,
}

#[repr(C)]
pub struct OsinfoResourcesList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoResourcesListPrivate,
}

#[repr(C)]
pub struct OsinfoTree {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoTreePrivate,
}

#[repr(C)]
pub struct OsinfoTreeList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoTreeListPrivate,
}

extern "C" {

    //=========================================================================
    // OsinfoDeviceDriverSigningReq
    //=========================================================================
    pub fn osinfo_device_driver_signing_req_get_type() -> GType;

    //=========================================================================
    // OsinfoInstallConfigParamPolicy
    //=========================================================================
    pub fn osinfo_install_config_param_policy_get_type() -> GType;

    //=========================================================================
    // OsinfoMediaError
    //=========================================================================
    pub fn osinfo_media_error_get_type() -> GType;
    pub fn osinfo_media_error_quark() -> glib::GQuark;

    //=========================================================================
    // OsinfoPathFormat
    //=========================================================================
    pub fn osinfo_path_format_get_type() -> GType;

    //=========================================================================
    // OsinfoProductRelationship
    //=========================================================================
    pub fn osinfo_product_relationship_get_type() -> GType;

    //=========================================================================
    // OsinfoReleaseStatus
    //=========================================================================
    pub fn osinfo_release_status_get_type() -> GType;

    //=========================================================================
    // OsinfoInstallScriptInjectionMethod
    //=========================================================================
    pub fn osinfo_install_script_injection_method_get_type() -> GType;

    //=========================================================================
    // OsinfoAvatarFormat
    //=========================================================================
    pub fn osinfo_avatar_format_get_type() -> GType;
    pub fn osinfo_avatar_format_new() -> *mut OsinfoAvatarFormat;
    pub fn osinfo_avatar_format_get_alpha(avatar: *mut OsinfoAvatarFormat) -> gboolean;
    pub fn osinfo_avatar_format_get_height(avatar: *mut OsinfoAvatarFormat) -> c_int;
    pub fn osinfo_avatar_format_get_mime_types(avatar: *mut OsinfoAvatarFormat) -> *mut glib::GList;
    pub fn osinfo_avatar_format_get_width(avatar: *mut OsinfoAvatarFormat) -> c_int;

    //=========================================================================
    // OsinfoDatamap
    //=========================================================================
    pub fn osinfo_datamap_get_type() -> GType;
    pub fn osinfo_datamap_new(id: *const c_char) -> *mut OsinfoDatamap;
    pub fn osinfo_datamap_insert(map: *mut OsinfoDatamap, inval: *const c_char, outval: *const c_char);
    pub fn osinfo_datamap_lookup(map: *mut OsinfoDatamap, inval: *const c_char) -> *const c_char;
    pub fn osinfo_datamap_reverse_lookup(map: *mut OsinfoDatamap, outval: *const c_char) -> *const c_char;

    //=========================================================================
    // OsinfoDatamapList
    //=========================================================================
    pub fn osinfo_datamaplist_get_type() -> GType;
    pub fn osinfo_datamaplist_new() -> *mut OsinfoDatamapList;

    //=========================================================================
    // OsinfoDb
    //=========================================================================
    pub fn osinfo_db_get_type() -> GType;
    pub fn osinfo_db_new() -> *mut OsinfoDb;
    pub fn osinfo_db_add_datamap(db: *mut OsinfoDb, datamap: *mut OsinfoDatamap);
    pub fn osinfo_db_add_deployment(db: *mut OsinfoDb, deployment: *mut OsinfoDeployment);
    pub fn osinfo_db_add_device(db: *mut OsinfoDb, device: *mut OsinfoDevice);
    pub fn osinfo_db_add_install_script(db: *mut OsinfoDb, script: *mut OsinfoInstallScript);
    pub fn osinfo_db_add_os(db: *mut OsinfoDb, os: *mut OsinfoOs);
    pub fn osinfo_db_add_platform(db: *mut OsinfoDb, platform: *mut OsinfoPlatform);
    pub fn osinfo_db_find_deployment(db: *mut OsinfoDb, os: *mut OsinfoOs, platform: *mut OsinfoPlatform) -> *mut OsinfoDeployment;
    pub fn osinfo_db_get_datamap(db: *mut OsinfoDb, id: *const c_char) -> *mut OsinfoDatamap;
    pub fn osinfo_db_get_datamap_list(db: *mut OsinfoDb) -> *mut OsinfoDatamapList;
    pub fn osinfo_db_get_deployment(db: *mut OsinfoDb, id: *const c_char) -> *mut OsinfoDeployment;
    pub fn osinfo_db_get_deployment_list(db: *mut OsinfoDb) -> *mut OsinfoDeploymentList;
    pub fn osinfo_db_get_device(db: *mut OsinfoDb, id: *const c_char) -> *mut OsinfoDevice;
    pub fn osinfo_db_get_device_list(db: *mut OsinfoDb) -> *mut OsinfoDeviceList;
    pub fn osinfo_db_get_install_script(db: *mut OsinfoDb, id: *const c_char) -> *mut OsinfoInstallScript;
    pub fn osinfo_db_get_install_script_list(db: *mut OsinfoDb) -> *mut OsinfoInstallScriptList;
    pub fn osinfo_db_get_os(db: *mut OsinfoDb, id: *const c_char) -> *mut OsinfoOs;
    pub fn osinfo_db_get_os_list(db: *mut OsinfoDb) -> *mut OsinfoOsList;
    pub fn osinfo_db_get_platform(db: *mut OsinfoDb, id: *const c_char) -> *mut OsinfoPlatform;
    pub fn osinfo_db_get_platform_list(db: *mut OsinfoDb) -> *mut OsinfoPlatformList;
    pub fn osinfo_db_guess_os_from_media(db: *mut OsinfoDb, media: *mut OsinfoMedia, matched_media: *mut *mut OsinfoMedia) -> *mut OsinfoOs;
    pub fn osinfo_db_guess_os_from_tree(db: *mut OsinfoDb, tree: *mut OsinfoTree, matched_tree: *mut *mut OsinfoTree) -> *mut OsinfoOs;
    pub fn osinfo_db_identify_media(db: *mut OsinfoDb, media: *mut OsinfoMedia) -> gboolean;
    pub fn osinfo_db_unique_values_for_os_relationship(db: *mut OsinfoDb, relshp: OsinfoProductRelationship) -> *mut OsinfoOsList;
    pub fn osinfo_db_unique_values_for_platform_relationship(db: *mut OsinfoDb, relshp: OsinfoProductRelationship) -> *mut OsinfoPlatformList;
    pub fn osinfo_db_unique_values_for_property_in_deployment(db: *mut OsinfoDb, propName: *const c_char) -> *mut glib::GList;
    pub fn osinfo_db_unique_values_for_property_in_device(db: *mut OsinfoDb, propName: *const c_char) -> *mut glib::GList;
    pub fn osinfo_db_unique_values_for_property_in_os(db: *mut OsinfoDb, propName: *const c_char) -> *mut glib::GList;
    pub fn osinfo_db_unique_values_for_property_in_platform(db: *mut OsinfoDb, propName: *const c_char) -> *mut glib::GList;

    //=========================================================================
    // OsinfoDeployment
    //=========================================================================
    pub fn osinfo_deployment_get_type() -> GType;
    pub fn osinfo_deployment_new(id: *const c_char, os: *mut OsinfoOs, platform: *mut OsinfoPlatform) -> *mut OsinfoDeployment;
    pub fn osinfo_deployment_add_device(deployment: *mut OsinfoDeployment, dev: *mut OsinfoDevice) -> *mut OsinfoDeviceLink;
    pub fn osinfo_deployment_get_device_links(deployment: *mut OsinfoDeployment, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_deployment_get_devices(deployment: *mut OsinfoDeployment, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceList;
    pub fn osinfo_deployment_get_os(deployment: *mut OsinfoDeployment) -> *mut OsinfoOs;
    pub fn osinfo_deployment_get_platform(deployment: *mut OsinfoDeployment) -> *mut OsinfoPlatform;
    pub fn osinfo_deployment_get_preferred_device(deployment: *mut OsinfoDeployment, filter: *mut OsinfoFilter) -> *mut OsinfoDevice;
    pub fn osinfo_deployment_get_preferred_device_link(deployment: *mut OsinfoDeployment, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceLink;

    //=========================================================================
    // OsinfoDeploymentList
    //=========================================================================
    pub fn osinfo_deploymentlist_get_type() -> GType;
    pub fn osinfo_deploymentlist_new() -> *mut OsinfoDeploymentList;
    pub fn osinfo_deploymentlist_new_copy(source: *mut OsinfoDeploymentList) -> *mut OsinfoDeploymentList;
    pub fn osinfo_deploymentlist_new_filtered(source: *mut OsinfoDeploymentList, filter: *mut OsinfoFilter) -> *mut OsinfoDeploymentList;
    pub fn osinfo_deploymentlist_new_intersection(sourceOne: *mut OsinfoDeploymentList, sourceTwo: *mut OsinfoDeploymentList) -> *mut OsinfoDeploymentList;
    pub fn osinfo_deploymentlist_new_union(sourceOne: *mut OsinfoDeploymentList, sourceTwo: *mut OsinfoDeploymentList) -> *mut OsinfoDeploymentList;

    //=========================================================================
    // OsinfoDevice
    //=========================================================================
    pub fn osinfo_device_get_type() -> GType;
    pub fn osinfo_device_new(id: *const c_char) -> *mut OsinfoDevice;
    pub fn osinfo_device_get_bus_type(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_class(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_name(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_product(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_product_id(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_subsystem(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_vendor(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_vendor_id(dev: *mut OsinfoDevice) -> *const c_char;

    //=========================================================================
    // OsinfoDeviceDriver
    //=========================================================================
    pub fn osinfo_device_driver_get_type() -> GType;
    pub fn osinfo_device_driver_get_architecture(driver: *mut OsinfoDeviceDriver) -> *const c_char;
    pub fn osinfo_device_driver_get_devices(driver: *mut OsinfoDeviceDriver) -> *mut OsinfoDeviceList;
    pub fn osinfo_device_driver_get_files(driver: *mut OsinfoDeviceDriver) -> *mut glib::GList;
    pub fn osinfo_device_driver_get_location(driver: *mut OsinfoDeviceDriver) -> *const c_char;
    pub fn osinfo_device_driver_get_pre_installable(driver: *mut OsinfoDeviceDriver) -> gboolean;
    pub fn osinfo_device_driver_get_signed(driver: *mut OsinfoDeviceDriver) -> gboolean;

    //=========================================================================
    // OsinfoDeviceDriverList
    //=========================================================================
    pub fn osinfo_device_driverlist_get_type() -> GType;
    pub fn osinfo_device_driverlist_new() -> *mut OsinfoDeviceDriverList;

    //=========================================================================
    // OsinfoDeviceLink
    //=========================================================================
    pub fn osinfo_devicelink_get_type() -> GType;
    pub fn osinfo_devicelink_new(target: *mut OsinfoDevice) -> *mut OsinfoDeviceLink;
    pub fn osinfo_devicelink_get_driver(link: *mut OsinfoDeviceLink) -> *const c_char;
    pub fn osinfo_devicelink_get_target(link: *mut OsinfoDeviceLink) -> *mut OsinfoDevice;

    //=========================================================================
    // OsinfoDeviceLinkFilter
    //=========================================================================
    pub fn osinfo_devicelinkfilter_get_type() -> GType;
    pub fn osinfo_devicelinkfilter_new(filter: *mut OsinfoFilter) -> *mut OsinfoDeviceLinkFilter;
    pub fn osinfo_devicelinkfilter_get_target_filter(filter: *mut OsinfoDeviceLinkFilter) -> *mut OsinfoFilter;

    //=========================================================================
    // OsinfoDeviceLinkList
    //=========================================================================
    pub fn osinfo_devicelinklist_get_type() -> GType;
    pub fn osinfo_devicelinklist_new() -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_devicelinklist_get_devices(list: *mut OsinfoDeviceLinkList, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceList;
    pub fn osinfo_devicelinklist_new_copy(source: *mut OsinfoDeviceLinkList) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_devicelinklist_new_filtered(source: *mut OsinfoDeviceLinkList, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_devicelinklist_new_intersection(sourceOne: *mut OsinfoDeviceLinkList, sourceTwo: *mut OsinfoDeviceLinkList) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_devicelinklist_new_union(sourceOne: *mut OsinfoDeviceLinkList, sourceTwo: *mut OsinfoDeviceLinkList) -> *mut OsinfoDeviceLinkList;

    //=========================================================================
    // OsinfoDeviceList
    //=========================================================================
    pub fn osinfo_devicelist_get_type() -> GType;
    pub fn osinfo_devicelist_new() -> *mut OsinfoDeviceList;
    pub fn osinfo_devicelist_new_copy(source: *mut OsinfoDeviceList) -> *mut OsinfoDeviceList;
    pub fn osinfo_devicelist_new_filtered(source: *mut OsinfoDeviceList, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceList;
    pub fn osinfo_devicelist_new_intersection(sourceOne: *mut OsinfoDeviceList, sourceTwo: *mut OsinfoDeviceList) -> *mut OsinfoDeviceList;
    pub fn osinfo_devicelist_new_union(sourceOne: *mut OsinfoDeviceList, sourceTwo: *mut OsinfoDeviceList) -> *mut OsinfoDeviceList;

    //=========================================================================
    // OsinfoEntity
    //=========================================================================
    pub fn osinfo_entity_get_type() -> GType;
    pub fn osinfo_entity_add_param(entity: *mut OsinfoEntity, key: *const c_char, value: *const c_char);
    pub fn osinfo_entity_clear_param(entity: *mut OsinfoEntity, key: *const c_char);
    pub fn osinfo_entity_get_id(entity: *mut OsinfoEntity) -> *const c_char;
    pub fn osinfo_entity_get_param_keys(entity: *mut OsinfoEntity) -> *mut glib::GList;
    pub fn osinfo_entity_get_param_value(entity: *mut OsinfoEntity, key: *const c_char) -> *const c_char;
    pub fn osinfo_entity_get_param_value_boolean(entity: *mut OsinfoEntity, key: *const c_char) -> gboolean;
    pub fn osinfo_entity_get_param_value_boolean_with_default(entity: *mut OsinfoEntity, key: *const c_char, default_value: gboolean) -> gboolean;
    pub fn osinfo_entity_get_param_value_enum(entity: *mut OsinfoEntity, key: *const c_char, enum_type: GType, default_value: c_int) -> c_int;
    pub fn osinfo_entity_get_param_value_int64(entity: *mut OsinfoEntity, key: *const c_char) -> i64;
    pub fn osinfo_entity_get_param_value_int64_with_default(entity: *mut OsinfoEntity, key: *const c_char, default_value: i64) -> i64;
    pub fn osinfo_entity_get_param_value_list(entity: *mut OsinfoEntity, key: *const c_char) -> *mut glib::GList;
    pub fn osinfo_entity_set_param(entity: *mut OsinfoEntity, key: *const c_char, value: *const c_char);
    pub fn osinfo_entity_set_param_boolean(entity: *mut OsinfoEntity, key: *const c_char, value: gboolean);
    pub fn osinfo_entity_set_param_enum(entity: *mut OsinfoEntity, key: *const c_char, value: c_int, enum_type: GType);
    pub fn osinfo_entity_set_param_int64(entity: *mut OsinfoEntity, key: *const c_char, value: i64);

    //=========================================================================
    // OsinfoFilter
    //=========================================================================
    pub fn osinfo_filter_get_type() -> GType;
    pub fn osinfo_filter_new() -> *mut OsinfoFilter;
    pub fn osinfo_filter_add_constraint(filter: *mut OsinfoFilter, propName: *const c_char, propVal: *const c_char);
    pub fn osinfo_filter_clear_constraint(filter: *mut OsinfoFilter, propName: *const c_char);
    pub fn osinfo_filter_clear_constraints(filter: *mut OsinfoFilter);
    pub fn osinfo_filter_get_constraint_keys(filter: *mut OsinfoFilter) -> *mut glib::GList;
    pub fn osinfo_filter_get_constraint_values(filter: *mut OsinfoFilter, propName: *const c_char) -> *mut glib::GList;
    pub fn osinfo_filter_matches(filter: *mut OsinfoFilter, entity: *mut OsinfoEntity) -> gboolean;

    //=========================================================================
    // OsinfoInstallConfig
    //=========================================================================
    pub fn osinfo_install_config_get_type() -> GType;
    pub fn osinfo_install_config_new(id: *const c_char) -> *mut OsinfoInstallConfig;
    pub fn osinfo_install_config_get_admin_password(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_avatar_disk(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_avatar_location(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_driver_signing(config: *mut OsinfoInstallConfig) -> gboolean;
    pub fn osinfo_install_config_get_hardware_arch(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_hostname(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_l10n_keyboard(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_l10n_language(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_l10n_timezone(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_post_install_drivers_disk(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_post_install_drivers_location(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_pre_install_drivers_disk(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_pre_install_drivers_location(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_reg_login(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_reg_password(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_reg_product_key(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_script_disk(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_target_disk(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_user_administrator(config: *mut OsinfoInstallConfig) -> gboolean;
    pub fn osinfo_install_config_get_user_autologin(config: *mut OsinfoInstallConfig) -> gboolean;
    pub fn osinfo_install_config_get_user_login(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_user_password(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_user_realname(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_set_admin_password(config: *mut OsinfoInstallConfig, password: *const c_char);
    pub fn osinfo_install_config_set_avatar_disk(config: *mut OsinfoInstallConfig, disk: *const c_char);
    pub fn osinfo_install_config_set_avatar_location(config: *mut OsinfoInstallConfig, location: *const c_char);
    pub fn osinfo_install_config_set_driver_signing(config: *mut OsinfoInstallConfig, signing: gboolean);
    pub fn osinfo_install_config_set_hardware_arch(config: *mut OsinfoInstallConfig, arch: *const c_char);
    pub fn osinfo_install_config_set_hostname(config: *mut OsinfoInstallConfig, hostname: *const c_char);
    pub fn osinfo_install_config_set_l10n_keyboard(config: *mut OsinfoInstallConfig, keyboard: *const c_char);
    pub fn osinfo_install_config_set_l10n_language(config: *mut OsinfoInstallConfig, language: *const c_char);
    pub fn osinfo_install_config_set_l10n_timezone(config: *mut OsinfoInstallConfig, timezone: *const c_char);
    pub fn osinfo_install_config_set_post_install_drivers_disk(config: *mut OsinfoInstallConfig, disk: *const c_char);
    pub fn osinfo_install_config_set_post_install_drivers_location(config: *mut OsinfoInstallConfig, location: *const c_char);
    pub fn osinfo_install_config_set_pre_install_drivers_disk(config: *mut OsinfoInstallConfig, disk: *const c_char);
    pub fn osinfo_install_config_set_pre_install_drivers_location(config: *mut OsinfoInstallConfig, location: *const c_char);
    pub fn osinfo_install_config_set_reg_login(config: *mut OsinfoInstallConfig, name: *const c_char);
    pub fn osinfo_install_config_set_reg_password(config: *mut OsinfoInstallConfig, password: *const c_char);
    pub fn osinfo_install_config_set_reg_product_key(config: *mut OsinfoInstallConfig, key: *const c_char);
    pub fn osinfo_install_config_set_script_disk(config: *mut OsinfoInstallConfig, disk: *const c_char);
    pub fn osinfo_install_config_set_target_disk(config: *mut OsinfoInstallConfig, disk: *const c_char);
    pub fn osinfo_install_config_set_user_administrator(config: *mut OsinfoInstallConfig, admin: gboolean);
    pub fn osinfo_install_config_set_user_autologin(config: *mut OsinfoInstallConfig, autologin: gboolean);
    pub fn osinfo_install_config_set_user_login(config: *mut OsinfoInstallConfig, username: *const c_char);
    pub fn osinfo_install_config_set_user_password(config: *mut OsinfoInstallConfig, password: *const c_char);
    pub fn osinfo_install_config_set_user_realname(config: *mut OsinfoInstallConfig, name: *const c_char);

    //=========================================================================
    // OsinfoInstallConfigParam
    //=========================================================================
    pub fn osinfo_install_config_param_get_type() -> GType;
    pub fn osinfo_install_config_param_new(name: *const c_char) -> *mut OsinfoInstallConfigParam;
    pub fn osinfo_install_config_param_get_name(config_param: *mut OsinfoInstallConfigParam) -> *const c_char;
    pub fn osinfo_install_config_param_get_policy(config_param: *mut OsinfoInstallConfigParam) -> OsinfoInstallConfigParamPolicy;
    pub fn osinfo_install_config_param_get_value_map(config_param: *mut OsinfoInstallConfigParam) -> *mut OsinfoDatamap;
    pub fn osinfo_install_config_param_is_optional(config_param: *mut OsinfoInstallConfigParam) -> gboolean;
    pub fn osinfo_install_config_param_is_required(config_param: *mut OsinfoInstallConfigParam) -> gboolean;
    pub fn osinfo_install_config_param_set_value_map(config_param: *mut OsinfoInstallConfigParam, datamap: *mut OsinfoDatamap);

    //=========================================================================
    // OsinfoInstallConfigParamList
    //=========================================================================
    pub fn osinfo_install_config_paramlist_get_type() -> GType;
    pub fn osinfo_install_config_paramlist_new() -> *mut OsinfoInstallConfigParamList;

    //=========================================================================
    // OsinfoInstallScript
    //=========================================================================
    pub fn osinfo_install_script_get_type() -> GType;
    pub fn osinfo_install_script_new(id: *const c_char) -> *mut OsinfoInstallScript;
    pub fn osinfo_install_script_new_data(id: *const c_char, profile: *const c_char, templateData: *const c_char) -> *mut OsinfoInstallScript;
    pub fn osinfo_install_script_new_uri(id: *const c_char, profile: *const c_char, templateUri: *const c_char) -> *mut OsinfoInstallScript;
    pub fn osinfo_install_script_generate(script: *mut OsinfoInstallScript, os: *mut OsinfoOs, config: *mut OsinfoInstallConfig, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn osinfo_install_script_generate_async(script: *mut OsinfoInstallScript, os: *mut OsinfoOs, config: *mut OsinfoInstallConfig, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn osinfo_install_script_generate_command_line(script: *mut OsinfoInstallScript, os: *mut OsinfoOs, config: *mut OsinfoInstallConfig) -> *mut c_char;
    pub fn osinfo_install_script_generate_command_line_for_media(script: *mut OsinfoInstallScript, media: *mut OsinfoMedia, config: *mut OsinfoInstallConfig) -> *mut c_char;
    pub fn osinfo_install_script_generate_finish(script: *mut OsinfoInstallScript, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn osinfo_install_script_generate_for_media(script: *mut OsinfoInstallScript, media: *mut OsinfoMedia, config: *mut OsinfoInstallConfig, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn osinfo_install_script_generate_for_media_async(script: *mut OsinfoInstallScript, media: *mut OsinfoMedia, config: *mut OsinfoInstallConfig, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn osinfo_install_script_generate_for_media_finish(script: *mut OsinfoInstallScript, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn osinfo_install_script_generate_output(script: *mut OsinfoInstallScript, os: *mut OsinfoOs, config: *mut OsinfoInstallConfig, output_dir: *mut gio::GFile, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut gio::GFile;
    pub fn osinfo_install_script_generate_output_async(script: *mut OsinfoInstallScript, os: *mut OsinfoOs, config: *mut OsinfoInstallConfig, output_dir: *mut gio::GFile, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn osinfo_install_script_generate_output_finish(script: *mut OsinfoInstallScript, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut gio::GFile;
    pub fn osinfo_install_script_generate_output_for_media(script: *mut OsinfoInstallScript, media: *mut OsinfoMedia, config: *mut OsinfoInstallConfig, output_dir: *mut gio::GFile, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut gio::GFile;
    pub fn osinfo_install_script_generate_output_for_media_async(script: *mut OsinfoInstallScript, media: *mut OsinfoMedia, config: *mut OsinfoInstallConfig, output_dir: *mut gio::GFile, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn osinfo_install_script_generate_output_for_media_finish(script: *mut OsinfoInstallScript, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut gio::GFile;
    pub fn osinfo_install_script_get_avatar_format(script: *mut OsinfoInstallScript) -> *mut OsinfoAvatarFormat;
    pub fn osinfo_install_script_get_can_post_install_drivers(script: *mut OsinfoInstallScript) -> gboolean;
    pub fn osinfo_install_script_get_can_pre_install_drivers(script: *mut OsinfoInstallScript) -> gboolean;
    pub fn osinfo_install_script_get_config_param(script: *mut OsinfoInstallScript, name: *const c_char) -> *mut OsinfoInstallConfigParam;
    pub fn osinfo_install_script_get_config_param_list(script: *mut OsinfoInstallScript) -> *mut glib::GList;
    pub fn osinfo_install_script_get_config_params(script: *mut OsinfoInstallScript) -> *mut OsinfoInstallConfigParamList;
    pub fn osinfo_install_script_get_expected_filename(script: *mut OsinfoInstallScript) -> *const c_char;
    //pub fn osinfo_install_script_get_injection_methods(script: *mut OsinfoInstallScript) -> /*Metadata mismatch*/[c:type mismatch unsigned int != OsinfoInstallScriptInjectionMethod of InstallScriptInjectionMethod];
    pub fn osinfo_install_script_get_needs_internet(script: *mut OsinfoInstallScript) -> gboolean;
    pub fn osinfo_install_script_get_output_filename(script: *mut OsinfoInstallScript) -> *const c_char;
    pub fn osinfo_install_script_get_output_prefix(script: *mut OsinfoInstallScript) -> *const c_char;
    pub fn osinfo_install_script_get_path_format(script: *mut OsinfoInstallScript) -> OsinfoPathFormat;
    //pub fn osinfo_install_script_get_post_install_drivers_signing_req(script: *mut OsinfoInstallScript) -> /*Metadata mismatch*/[c:type mismatch int != OsinfoDeviceDriverSigningReq of DeviceDriverSigningReq];
    //pub fn osinfo_install_script_get_pre_install_drivers_signing_req(script: *mut OsinfoInstallScript) -> /*Metadata mismatch*/[c:type mismatch int != OsinfoDeviceDriverSigningReq of DeviceDriverSigningReq];
    pub fn osinfo_install_script_get_product_key_format(script: *mut OsinfoInstallScript) -> *const c_char;
    pub fn osinfo_install_script_get_profile(script: *mut OsinfoInstallScript) -> *const c_char;
    pub fn osinfo_install_script_get_template_data(script: *mut OsinfoInstallScript) -> *const c_char;
    pub fn osinfo_install_script_get_template_uri(script: *mut OsinfoInstallScript) -> *const c_char;
    pub fn osinfo_install_script_has_config_param(script: *mut OsinfoInstallScript, config_param: *mut OsinfoInstallConfigParam) -> gboolean;
    pub fn osinfo_install_script_has_config_param_name(script: *mut OsinfoInstallScript, name: *const c_char) -> gboolean;
    pub fn osinfo_install_script_set_output_prefix(script: *mut OsinfoInstallScript, prefix: *const c_char);

    //=========================================================================
    // OsinfoInstallScriptList
    //=========================================================================
    pub fn osinfo_install_scriptlist_get_type() -> GType;
    pub fn osinfo_install_scriptlist_new() -> *mut OsinfoInstallScriptList;
    pub fn osinfo_install_scriptlist_new_copy(source: *mut OsinfoInstallScriptList) -> *mut OsinfoInstallScriptList;
    pub fn osinfo_install_scriptlist_new_filtered(source: *mut OsinfoInstallScriptList, filter: *mut OsinfoFilter) -> *mut OsinfoInstallScriptList;
    pub fn osinfo_install_scriptlist_new_intersection(sourceOne: *mut OsinfoInstallScriptList, sourceTwo: *mut OsinfoInstallScriptList) -> *mut OsinfoInstallScriptList;
    pub fn osinfo_install_scriptlist_new_union(sourceOne: *mut OsinfoInstallScriptList, sourceTwo: *mut OsinfoInstallScriptList) -> *mut OsinfoInstallScriptList;

    //=========================================================================
    // OsinfoList
    //=========================================================================
    pub fn osinfo_list_get_type() -> GType;
    pub fn osinfo_list_add(list: *mut OsinfoList, entity: *mut OsinfoEntity);
    pub fn osinfo_list_add_all(list: *mut OsinfoList, source: *mut OsinfoList);
    pub fn osinfo_list_add_filtered(list: *mut OsinfoList, source: *mut OsinfoList, filter: *mut OsinfoFilter);
    pub fn osinfo_list_add_intersection(list: *mut OsinfoList, sourceOne: *mut OsinfoList, sourceTwo: *mut OsinfoList);
    pub fn osinfo_list_add_union(list: *mut OsinfoList, sourceOne: *mut OsinfoList, sourceTwo: *mut OsinfoList);
    pub fn osinfo_list_find_by_id(list: *mut OsinfoList, id: *const c_char) -> *mut OsinfoEntity;
    pub fn osinfo_list_get_element_type(list: *mut OsinfoList) -> GType;
    pub fn osinfo_list_get_elements(list: *mut OsinfoList) -> *mut glib::GList;
    pub fn osinfo_list_get_length(list: *mut OsinfoList) -> c_int;
    pub fn osinfo_list_get_nth(list: *mut OsinfoList, idx: c_int) -> *mut OsinfoEntity;
    pub fn osinfo_list_new_copy(source: *mut OsinfoList) -> *mut OsinfoList;
    pub fn osinfo_list_new_filtered(source: *mut OsinfoList, filter: *mut OsinfoFilter) -> *mut OsinfoList;
    pub fn osinfo_list_new_intersection(sourceOne: *mut OsinfoList, sourceTwo: *mut OsinfoList) -> *mut OsinfoList;
    pub fn osinfo_list_new_union(sourceOne: *mut OsinfoList, sourceTwo: *mut OsinfoList) -> *mut OsinfoList;

    //=========================================================================
    // OsinfoLoader
    //=========================================================================
    pub fn osinfo_loader_get_type() -> GType;
    pub fn osinfo_loader_new() -> *mut OsinfoLoader;
    pub fn osinfo_loader_get_db(loader: *mut OsinfoLoader) -> *mut OsinfoDb;
    pub fn osinfo_loader_process_default_path(loader: *mut OsinfoLoader, error: *mut *mut glib::GError);
    pub fn osinfo_loader_process_local_path(loader: *mut OsinfoLoader, error: *mut *mut glib::GError);
    pub fn osinfo_loader_process_path(loader: *mut OsinfoLoader, path: *const c_char, error: *mut *mut glib::GError);
    pub fn osinfo_loader_process_system_path(loader: *mut OsinfoLoader, error: *mut *mut glib::GError);
    pub fn osinfo_loader_process_uri(loader: *mut OsinfoLoader, uri: *const c_char, error: *mut *mut glib::GError);
    pub fn osinfo_loader_process_user_path(loader: *mut OsinfoLoader, error: *mut *mut glib::GError);

    //=========================================================================
    // OsinfoMedia
    //=========================================================================
    pub fn osinfo_media_get_type() -> GType;
    pub fn osinfo_media_new(id: *const c_char, architecture: *const c_char) -> *mut OsinfoMedia;
    pub fn osinfo_media_create_from_location(location: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut OsinfoMedia;
    pub fn osinfo_media_create_from_location_async(location: *const c_char, priority: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn osinfo_media_create_from_location_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut OsinfoMedia;
    pub fn osinfo_media_get_application_id(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_architecture(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_eject_after_install(media: *mut OsinfoMedia) -> gboolean;
    pub fn osinfo_media_get_initrd_path(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_installer(media: *mut OsinfoMedia) -> gboolean;
    pub fn osinfo_media_get_installer_reboots(media: *mut OsinfoMedia) -> c_int;
    pub fn osinfo_media_get_kernel_path(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_languages(media: *mut OsinfoMedia) -> *mut glib::GList;
    pub fn osinfo_media_get_live(media: *mut OsinfoMedia) -> gboolean;
    pub fn osinfo_media_get_os(media: *mut OsinfoMedia) -> *mut OsinfoOs;
    pub fn osinfo_media_get_os_variants(media: *mut OsinfoMedia) -> *mut OsinfoOsVariantList;
    pub fn osinfo_media_get_publisher_id(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_system_id(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_url(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_volume_id(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_volume_size(media: *mut OsinfoMedia) -> i64;

    //=========================================================================
    // OsinfoMediaList
    //=========================================================================
    pub fn osinfo_medialist_get_type() -> GType;
    pub fn osinfo_medialist_new() -> *mut OsinfoMediaList;
    pub fn osinfo_medialist_new_copy(source: *mut OsinfoMediaList) -> *mut OsinfoMediaList;
    pub fn osinfo_medialist_new_filtered(source: *mut OsinfoMediaList, filter: *mut OsinfoFilter) -> *mut OsinfoMediaList;
    pub fn osinfo_medialist_new_intersection(sourceOne: *mut OsinfoMediaList, sourceTwo: *mut OsinfoMediaList) -> *mut OsinfoMediaList;
    pub fn osinfo_medialist_new_union(sourceOne: *mut OsinfoMediaList, sourceTwo: *mut OsinfoMediaList) -> *mut OsinfoMediaList;

    //=========================================================================
    // OsinfoOs
    //=========================================================================
    pub fn osinfo_os_get_type() -> GType;
    pub fn osinfo_os_new(id: *const c_char) -> *mut OsinfoOs;
    pub fn osinfo_os_add_device(os: *mut OsinfoOs, dev: *mut OsinfoDevice) -> *mut OsinfoDeviceLink;
    pub fn osinfo_os_add_device_driver(os: *mut OsinfoOs, driver: *mut OsinfoDeviceDriver);
    pub fn osinfo_os_add_install_script(os: *mut OsinfoOs, script: *mut OsinfoInstallScript);
    pub fn osinfo_os_add_media(os: *mut OsinfoOs, media: *mut OsinfoMedia);
    pub fn osinfo_os_add_minimum_resources(os: *mut OsinfoOs, resources: *mut OsinfoResources);
    pub fn osinfo_os_add_recommended_resources(os: *mut OsinfoOs, resources: *mut OsinfoResources);
    pub fn osinfo_os_add_tree(os: *mut OsinfoOs, tree: *mut OsinfoTree);
    pub fn osinfo_os_add_variant(os: *mut OsinfoOs, variant: *mut OsinfoOsVariant);
    pub fn osinfo_os_find_install_script(os: *mut OsinfoOs, profile: *const c_char) -> *mut OsinfoInstallScript;
    pub fn osinfo_os_get_all_devices(os: *mut OsinfoOs, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceList;
    pub fn osinfo_os_get_device_drivers(os: *mut OsinfoOs) -> *mut OsinfoDeviceDriverList;
    pub fn osinfo_os_get_device_links(os: *mut OsinfoOs, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_os_get_devices(os: *mut OsinfoOs, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceList;
    pub fn osinfo_os_get_devices_by_property(os: *mut OsinfoOs, property: *const c_char, value: *const c_char, inherited: gboolean) -> *mut OsinfoDeviceList;
    pub fn osinfo_os_get_distro(os: *mut OsinfoOs) -> *const c_char;
    pub fn osinfo_os_get_family(os: *mut OsinfoOs) -> *const c_char;
    pub fn osinfo_os_get_install_script_list(os: *mut OsinfoOs) -> *mut OsinfoInstallScriptList;
    pub fn osinfo_os_get_media_list(os: *mut OsinfoOs) -> *mut OsinfoMediaList;
    pub fn osinfo_os_get_minimum_resources(os: *mut OsinfoOs) -> *mut OsinfoResourcesList;
    pub fn osinfo_os_get_recommended_resources(os: *mut OsinfoOs) -> *mut OsinfoResourcesList;
    //pub fn osinfo_os_get_release_status(os: *mut OsinfoOs) -> /*Metadata mismatch*/[c:type mismatch int != OsinfoReleaseStatus of ReleaseStatus];
    pub fn osinfo_os_get_tree_list(os: *mut OsinfoOs) -> *mut OsinfoTreeList;
    pub fn osinfo_os_get_variant_list(os: *mut OsinfoOs) -> *mut OsinfoOsVariantList;

    //=========================================================================
    // OsinfoOsList
    //=========================================================================
    pub fn osinfo_oslist_get_type() -> GType;
    pub fn osinfo_oslist_new() -> *mut OsinfoOsList;
    pub fn osinfo_oslist_new_copy(source: *mut OsinfoOsList) -> *mut OsinfoOsList;
    pub fn osinfo_oslist_new_filtered(source: *mut OsinfoOsList, filter: *mut OsinfoFilter) -> *mut OsinfoOsList;
    pub fn osinfo_oslist_new_intersection(sourceOne: *mut OsinfoOsList, sourceTwo: *mut OsinfoOsList) -> *mut OsinfoOsList;
    pub fn osinfo_oslist_new_union(sourceOne: *mut OsinfoOsList, sourceTwo: *mut OsinfoOsList) -> *mut OsinfoOsList;

    //=========================================================================
    // OsinfoOsVariant
    //=========================================================================
    pub fn osinfo_os_variant_get_type() -> GType;
    pub fn osinfo_os_variant_new(id: *const c_char) -> *mut OsinfoOsVariant;
    pub fn osinfo_os_variant_get_name(variant: *mut OsinfoOsVariant) -> *const c_char;

    //=========================================================================
    // OsinfoOsVariantList
    //=========================================================================
    pub fn osinfo_os_variantlist_get_type() -> GType;
    pub fn osinfo_os_variantlist_new() -> *mut OsinfoOsVariantList;

    //=========================================================================
    // OsinfoPlatform
    //=========================================================================
    pub fn osinfo_platform_get_type() -> GType;
    pub fn osinfo_platform_new(id: *const c_char) -> *mut OsinfoPlatform;
    pub fn osinfo_platform_add_device(platform: *mut OsinfoPlatform, dev: *mut OsinfoDevice) -> *mut OsinfoDeviceLink;
    pub fn osinfo_platform_get_all_devices(platform: *mut OsinfoPlatform, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceList;
    pub fn osinfo_platform_get_device_links(platform: *mut OsinfoPlatform, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_platform_get_devices(platform: *mut OsinfoPlatform, filter: *mut OsinfoFilter) -> *mut OsinfoDeviceList;

    //=========================================================================
    // OsinfoPlatformList
    //=========================================================================
    pub fn osinfo_platformlist_get_type() -> GType;
    pub fn osinfo_platformlist_new() -> *mut OsinfoPlatformList;
    pub fn osinfo_platformlist_new_copy(source: *mut OsinfoPlatformList) -> *mut OsinfoPlatformList;
    pub fn osinfo_platformlist_new_filtered(source: *mut OsinfoPlatformList, filter: *mut OsinfoFilter) -> *mut OsinfoPlatformList;
    pub fn osinfo_platformlist_new_intersection(sourceOne: *mut OsinfoPlatformList, sourceTwo: *mut OsinfoPlatformList) -> *mut OsinfoPlatformList;
    pub fn osinfo_platformlist_new_union(sourceOne: *mut OsinfoPlatformList, sourceTwo: *mut OsinfoPlatformList) -> *mut OsinfoPlatformList;

    //=========================================================================
    // OsinfoProduct
    //=========================================================================
    pub fn osinfo_product_get_type() -> GType;
    pub fn osinfo_product_add_related(product: *mut OsinfoProduct, relshp: OsinfoProductRelationship, otherproduct: *mut OsinfoProduct);
    pub fn osinfo_product_get_codename(prod: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_eol_date(prod: *mut OsinfoProduct) -> *mut glib::GDate;
    pub fn osinfo_product_get_eol_date_string(prod: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_logo(prod: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_name(prod: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_related(product: *mut OsinfoProduct, relshp: OsinfoProductRelationship) -> *mut OsinfoProductList;
    pub fn osinfo_product_get_release_date(prod: *mut OsinfoProduct) -> *mut glib::GDate;
    pub fn osinfo_product_get_release_date_string(prod: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_short_id(prod: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_vendor(prod: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_version(prod: *mut OsinfoProduct) -> *const c_char;

    //=========================================================================
    // OsinfoProductFilter
    //=========================================================================
    pub fn osinfo_productfilter_get_type() -> GType;
    pub fn osinfo_productfilter_new() -> *mut OsinfoProductFilter;
    pub fn osinfo_productfilter_add_product_constraint(productfilter: *mut OsinfoProductFilter, relshp: OsinfoProductRelationship, product: *mut OsinfoProduct) -> c_int;
    pub fn osinfo_productfilter_add_support_date_constraint(productfilter: *mut OsinfoProductFilter, when: *mut glib::GDate);
    pub fn osinfo_productfilter_clear_product_constraint(productfilter: *mut OsinfoProductFilter, relshp: OsinfoProductRelationship);
    pub fn osinfo_productfilter_clear_product_constraints(productfilter: *mut OsinfoProductFilter);
    pub fn osinfo_productfilter_get_product_constraint_values(productfilter: *mut OsinfoProductFilter, relshp: OsinfoProductRelationship) -> *mut glib::GList;

    //=========================================================================
    // OsinfoProductList
    //=========================================================================
    pub fn osinfo_productlist_get_type() -> GType;
    pub fn osinfo_productlist_new() -> *mut OsinfoProductList;
    pub fn osinfo_productlist_new_copy(source: *mut OsinfoProductList) -> *mut OsinfoProductList;
    pub fn osinfo_productlist_new_filtered(source: *mut OsinfoProductList, filter: *mut OsinfoFilter) -> *mut OsinfoProductList;
    pub fn osinfo_productlist_new_intersection(sourceOne: *mut OsinfoProductList, sourceTwo: *mut OsinfoProductList) -> *mut OsinfoProductList;
    pub fn osinfo_productlist_new_union(sourceOne: *mut OsinfoProductList, sourceTwo: *mut OsinfoProductList) -> *mut OsinfoProductList;

    //=========================================================================
    // OsinfoResources
    //=========================================================================
    pub fn osinfo_resources_get_type() -> GType;
    pub fn osinfo_resources_new(id: *const c_char, architecture: *const c_char) -> *mut OsinfoResources;
    pub fn osinfo_resources_get_architecture(resources: *mut OsinfoResources) -> *const c_char;
    pub fn osinfo_resources_get_cpu(resources: *mut OsinfoResources) -> i64;
    pub fn osinfo_resources_get_n_cpus(resources: *mut OsinfoResources) -> c_int;
    pub fn osinfo_resources_get_ram(resources: *mut OsinfoResources) -> i64;
    pub fn osinfo_resources_get_storage(resources: *mut OsinfoResources) -> i64;
    pub fn osinfo_resources_set_cpu(resources: *mut OsinfoResources, cpu: i64);
    pub fn osinfo_resources_set_n_cpus(resources: *mut OsinfoResources, n_cpus: c_int);
    pub fn osinfo_resources_set_ram(resources: *mut OsinfoResources, ram: i64);
    pub fn osinfo_resources_set_storage(resources: *mut OsinfoResources, storage: i64);

    //=========================================================================
    // OsinfoResourcesList
    //=========================================================================
    pub fn osinfo_resourceslist_get_type() -> GType;
    pub fn osinfo_resourceslist_new() -> *mut OsinfoResourcesList;
    pub fn osinfo_resourceslist_new_copy(source: *mut OsinfoResourcesList) -> *mut OsinfoResourcesList;
    pub fn osinfo_resourceslist_new_filtered(source: *mut OsinfoResourcesList, filter: *mut OsinfoFilter) -> *mut OsinfoResourcesList;
    pub fn osinfo_resourceslist_new_intersection(sourceOne: *mut OsinfoResourcesList, sourceTwo: *mut OsinfoResourcesList) -> *mut OsinfoResourcesList;
    pub fn osinfo_resourceslist_new_union(sourceOne: *mut OsinfoResourcesList, sourceTwo: *mut OsinfoResourcesList) -> *mut OsinfoResourcesList;

    //=========================================================================
    // OsinfoTree
    //=========================================================================
    pub fn osinfo_tree_get_type() -> GType;
    pub fn osinfo_tree_new(id: *const c_char, architecture: *const c_char) -> *mut OsinfoTree;
    pub fn osinfo_tree_create_from_location(location: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut OsinfoTree;
    pub fn osinfo_tree_create_from_location_async(location: *const c_char, priority: c_int, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn osinfo_tree_create_from_location_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut OsinfoTree;
    pub fn osinfo_tree_error_quark() -> glib::GQuark;
    pub fn osinfo_tree_get_architecture(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_boot_iso_path(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_initrd_path(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_kernel_path(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_treeinfo_arch(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_treeinfo_family(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_treeinfo_variant(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_treeinfo_version(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_url(tree: *mut OsinfoTree) -> *const c_char;

    //=========================================================================
    // OsinfoTreeList
    //=========================================================================
    pub fn osinfo_treelist_get_type() -> GType;
    pub fn osinfo_treelist_new() -> *mut OsinfoTreeList;
    pub fn osinfo_treelist_new_copy(source: *mut OsinfoTreeList) -> *mut OsinfoTreeList;
    pub fn osinfo_treelist_new_filtered(source: *mut OsinfoTreeList, filter: *mut OsinfoFilter) -> *mut OsinfoTreeList;
    pub fn osinfo_treelist_new_intersection(sourceOne: *mut OsinfoTreeList, sourceTwo: *mut OsinfoTreeList) -> *mut OsinfoTreeList;
    pub fn osinfo_treelist_new_union(sourceOne: *mut OsinfoTreeList, sourceTwo: *mut OsinfoTreeList) -> *mut OsinfoTreeList;

}
