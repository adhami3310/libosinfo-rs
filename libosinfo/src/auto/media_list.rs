// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::List;
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "OsinfoMediaList")]
    pub struct MediaList(Object<ffi::OsinfoMediaList, ffi::OsinfoMediaListClass>) @extends List;

    match fn {
        type_ => || ffi::osinfo_medialist_get_type(),
    }
}

impl MediaList {
    pub const NONE: Option<&'static MediaList> = None;

    #[doc(alias = "osinfo_medialist_new")]
    pub fn new() -> MediaList {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_medialist_new()) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`MediaList`] objects.
    ///
    /// This method returns an instance of [`MediaListBuilder`](crate::builders::MediaListBuilder) which can be used to create [`MediaList`] objects.
    pub fn builder() -> MediaListBuilder {
        MediaListBuilder::new()
    }
}

impl Default for MediaList {
    fn default() -> Self {
        Self::new()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`MediaList`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct MediaListBuilder {
    builder: glib::object::ObjectBuilder<'static, MediaList>,
}

impl MediaListBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn element_type(self, element_type: glib::types::Type) -> Self {
        Self {
            builder: self.builder.property("element-type", element_type),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`MediaList`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> MediaList {
        self.builder.build()
    }
}

impl fmt::Display for MediaList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MediaList")
    }
}
