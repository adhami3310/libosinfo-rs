// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Device;
use DeviceDriver;
use DeviceDriverList;
use DeviceLink;
use DeviceLinkList;
use DeviceList;
use Entity;
use Filter;
use InstallScript;
use InstallScriptList;
use Media;
use MediaList;
use OsVariant;
use OsVariantList;
use Product;
use Resources;
use ResourcesList;
use Tree;
use TreeList;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Os(Object<ffi::OsinfoOs, ffi::OsinfoOsClass>): Product, Entity;

    match fn {
        get_type => || ffi::osinfo_os_get_type(),
    }
}

impl Os {
    pub fn new(id: &str) -> Os {
        unsafe {
            from_glib_full(ffi::osinfo_os_new(id.to_glib_none().0))
        }
    }
}

pub trait OsExt {
    fn add_device(&self, dev: &Device) -> Option<DeviceLink>;

    fn add_device_driver(&self, driver: &DeviceDriver);

    fn add_install_script(&self, script: &InstallScript);

    fn add_media(&self, media: &Media);

    fn add_minimum_resources(&self, resources: &Resources);

    fn add_recommended_resources(&self, resources: &Resources);

    fn add_tree(&self, tree: &Tree);

    fn add_variant(&self, variant: &OsVariant);

    fn find_install_script(&self, profile: &str) -> Option<InstallScript>;

    fn get_all_devices<'a, P: IsA<Filter> + 'a, Q: Into<Option<&'a P>>>(&self, filter: Q) -> Option<DeviceList>;

    fn get_device_drivers(&self) -> Option<DeviceDriverList>;

    fn get_device_links<'a, P: IsA<Filter> + 'a, Q: Into<Option<&'a P>>>(&self, filter: Q) -> Option<DeviceLinkList>;

    fn get_devices<'a, P: IsA<Filter> + 'a, Q: Into<Option<&'a P>>>(&self, filter: Q) -> Option<DeviceList>;

    fn get_devices_by_property(&self, property: &str, value: &str, inherited: bool) -> Option<DeviceList>;

    fn get_distro(&self) -> Option<String>;

    fn get_family(&self) -> Option<String>;

    fn get_install_script_list(&self) -> Option<InstallScriptList>;

    fn get_media_list(&self) -> Option<MediaList>;

    fn get_minimum_resources(&self) -> Option<ResourcesList>;

    fn get_recommended_resources(&self) -> Option<ResourcesList>;

    fn get_tree_list(&self) -> Option<TreeList>;

    fn get_variant_list(&self) -> Option<OsVariantList>;

    fn connect_property_distro_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Os> + IsA<glib::object::Object>> OsExt for O {
    fn add_device(&self, dev: &Device) -> Option<DeviceLink> {
        unsafe {
            from_glib_none(ffi::osinfo_os_add_device(self.to_glib_none().0, dev.to_glib_none().0))
        }
    }

    fn add_device_driver(&self, driver: &DeviceDriver) {
        unsafe {
            ffi::osinfo_os_add_device_driver(self.to_glib_none().0, driver.to_glib_none().0);
        }
    }

    fn add_install_script(&self, script: &InstallScript) {
        unsafe {
            ffi::osinfo_os_add_install_script(self.to_glib_none().0, script.to_glib_none().0);
        }
    }

    fn add_media(&self, media: &Media) {
        unsafe {
            ffi::osinfo_os_add_media(self.to_glib_none().0, media.to_glib_none().0);
        }
    }

    fn add_minimum_resources(&self, resources: &Resources) {
        unsafe {
            ffi::osinfo_os_add_minimum_resources(self.to_glib_none().0, resources.to_glib_none().0);
        }
    }

    fn add_recommended_resources(&self, resources: &Resources) {
        unsafe {
            ffi::osinfo_os_add_recommended_resources(self.to_glib_none().0, resources.to_glib_none().0);
        }
    }

    fn add_tree(&self, tree: &Tree) {
        unsafe {
            ffi::osinfo_os_add_tree(self.to_glib_none().0, tree.to_glib_none().0);
        }
    }

    fn add_variant(&self, variant: &OsVariant) {
        unsafe {
            ffi::osinfo_os_add_variant(self.to_glib_none().0, variant.to_glib_none().0);
        }
    }

    fn find_install_script(&self, profile: &str) -> Option<InstallScript> {
        unsafe {
            from_glib_full(ffi::osinfo_os_find_install_script(self.to_glib_none().0, profile.to_glib_none().0))
        }
    }

    fn get_all_devices<'a, P: IsA<Filter> + 'a, Q: Into<Option<&'a P>>>(&self, filter: Q) -> Option<DeviceList> {
        let filter = filter.into();
        let filter = filter.to_glib_none();
        unsafe {
            from_glib_full(ffi::osinfo_os_get_all_devices(self.to_glib_none().0, filter.0))
        }
    }

    fn get_device_drivers(&self) -> Option<DeviceDriverList> {
        unsafe {
            from_glib_none(ffi::osinfo_os_get_device_drivers(self.to_glib_none().0))
        }
    }

    fn get_device_links<'a, P: IsA<Filter> + 'a, Q: Into<Option<&'a P>>>(&self, filter: Q) -> Option<DeviceLinkList> {
        let filter = filter.into();
        let filter = filter.to_glib_none();
        unsafe {
            from_glib_full(ffi::osinfo_os_get_device_links(self.to_glib_none().0, filter.0))
        }
    }

    fn get_devices<'a, P: IsA<Filter> + 'a, Q: Into<Option<&'a P>>>(&self, filter: Q) -> Option<DeviceList> {
        let filter = filter.into();
        let filter = filter.to_glib_none();
        unsafe {
            from_glib_full(ffi::osinfo_os_get_devices(self.to_glib_none().0, filter.0))
        }
    }

    fn get_devices_by_property(&self, property: &str, value: &str, inherited: bool) -> Option<DeviceList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_devices_by_property(self.to_glib_none().0, property.to_glib_none().0, value.to_glib_none().0, inherited.to_glib()))
        }
    }

    fn get_distro(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_os_get_distro(self.to_glib_none().0))
        }
    }

    fn get_family(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_os_get_family(self.to_glib_none().0))
        }
    }

    fn get_install_script_list(&self) -> Option<InstallScriptList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_install_script_list(self.to_glib_none().0))
        }
    }

    fn get_media_list(&self) -> Option<MediaList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_media_list(self.to_glib_none().0))
        }
    }

    fn get_minimum_resources(&self) -> Option<ResourcesList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_minimum_resources(self.to_glib_none().0))
        }
    }

    fn get_recommended_resources(&self) -> Option<ResourcesList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_recommended_resources(self.to_glib_none().0))
        }
    }

    fn get_tree_list(&self) -> Option<TreeList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_tree_list(self.to_glib_none().0))
        }
    }

    fn get_variant_list(&self) -> Option<OsVariantList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_variant_list(self.to_glib_none().0))
        }
    }

    fn connect_property_distro_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::distro",
                transmute(notify_distro_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::family",
                transmute(notify_family_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_distro_trampoline<P>(this: *mut ffi::OsinfoOs, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Os> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Os::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_family_trampoline<P>(this: *mut ffi::OsinfoOs, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Os> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Os::from_glib_borrow(this).downcast_unchecked())
}
