// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Entity;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Resources(Object<ffi::OsinfoResources, ffi::OsinfoResourcesClass>): Entity;

    match fn {
        get_type => || ffi::osinfo_resources_get_type(),
    }
}

impl Resources {
    pub fn new(id: &str, architecture: &str) -> Resources {
        unsafe {
            from_glib_full(ffi::osinfo_resources_new(id.to_glib_none().0, architecture.to_glib_none().0))
        }
    }
}

pub trait ResourcesExt {
    fn get_architecture(&self) -> Option<String>;

    fn get_cpu(&self) -> i64;

    fn get_n_cpus(&self) -> i32;

    fn get_ram(&self) -> i64;

    fn get_storage(&self) -> i64;

    fn set_cpu(&self, cpu: i64);

    fn set_n_cpus(&self, n_cpus: i32);

    fn set_ram(&self, ram: i64);

    fn set_storage(&self, storage: i64);

    fn connect_property_architecture_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_cpu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_n_cpus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ram_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_storage_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Resources> + IsA<glib::object::Object>> ResourcesExt for O {
    fn get_architecture(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::osinfo_resources_get_architecture(self.to_glib_none().0))
        }
    }

    fn get_cpu(&self) -> i64 {
        unsafe {
            ffi::osinfo_resources_get_cpu(self.to_glib_none().0)
        }
    }

    fn get_n_cpus(&self) -> i32 {
        unsafe {
            ffi::osinfo_resources_get_n_cpus(self.to_glib_none().0)
        }
    }

    fn get_ram(&self) -> i64 {
        unsafe {
            ffi::osinfo_resources_get_ram(self.to_glib_none().0)
        }
    }

    fn get_storage(&self) -> i64 {
        unsafe {
            ffi::osinfo_resources_get_storage(self.to_glib_none().0)
        }
    }

    fn set_cpu(&self, cpu: i64) {
        unsafe {
            ffi::osinfo_resources_set_cpu(self.to_glib_none().0, cpu);
        }
    }

    fn set_n_cpus(&self, n_cpus: i32) {
        unsafe {
            ffi::osinfo_resources_set_n_cpus(self.to_glib_none().0, n_cpus);
        }
    }

    fn set_ram(&self, ram: i64) {
        unsafe {
            ffi::osinfo_resources_set_ram(self.to_glib_none().0, ram);
        }
    }

    fn set_storage(&self, storage: i64) {
        unsafe {
            ffi::osinfo_resources_set_storage(self.to_glib_none().0, storage);
        }
    }

    fn connect_property_architecture_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::architecture",
                transmute(notify_architecture_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_cpu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::cpu",
                transmute(notify_cpu_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_n_cpus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::n-cpus",
                transmute(notify_n_cpus_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_ram_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::ram",
                transmute(notify_ram_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_storage_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::storage",
                transmute(notify_storage_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_architecture_trampoline<P>(this: *mut ffi::OsinfoResources, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Resources> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Resources::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_cpu_trampoline<P>(this: *mut ffi::OsinfoResources, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Resources> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Resources::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_n_cpus_trampoline<P>(this: *mut ffi::OsinfoResources, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Resources> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Resources::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ram_trampoline<P>(this: *mut ffi::OsinfoResources, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Resources> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Resources::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_storage_trampoline<P>(this: *mut ffi::OsinfoResources, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Resources> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Resources::from_glib_borrow(this).downcast_unchecked())
}
