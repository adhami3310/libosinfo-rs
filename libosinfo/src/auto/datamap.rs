// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::Entity;
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "OsinfoDatamap")]
    pub struct Datamap(Object<ffi::OsinfoDatamap, ffi::OsinfoDatamapClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_datamap_get_type(),
    }
}

impl Datamap {
    pub const NONE: Option<&'static Datamap> = None;

    #[doc(alias = "osinfo_datamap_new")]
    pub fn new(id: &str) -> Datamap {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::osinfo_datamap_new(id.to_glib_none().0)) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Datamap`] objects.
    ///
    /// This method returns an instance of [`DatamapBuilder`](crate::builders::DatamapBuilder) which can be used to create [`Datamap`] objects.
    pub fn builder() -> DatamapBuilder {
        DatamapBuilder::new()
    }
}

impl Default for Datamap {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Datamap`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DatamapBuilder {
    builder: glib::object::ObjectBuilder<'static, Datamap>,
}

impl DatamapBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn id(self, id: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("id", id.into()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Datamap`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Datamap {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Datamap>> Sealed for T {}
}

pub trait DatamapExt: IsA<Datamap> + sealed::Sealed + 'static {
    #[doc(alias = "osinfo_datamap_insert")]
    fn insert(&self, inval: &str, outval: &str) {
        unsafe {
            ffi::osinfo_datamap_insert(
                self.as_ref().to_glib_none().0,
                inval.to_glib_none().0,
                outval.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "osinfo_datamap_lookup")]
    fn lookup(&self, inval: &str) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_datamap_lookup(
                self.as_ref().to_glib_none().0,
                inval.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "osinfo_datamap_reverse_lookup")]
    fn reverse_lookup(&self, outval: &str) -> glib::GString {
        unsafe {
            from_glib_none(ffi::osinfo_datamap_reverse_lookup(
                self.as_ref().to_glib_none().0,
                outval.to_glib_none().0,
            ))
        }
    }
}

impl<O: IsA<Datamap>> DatamapExt for O {}

impl fmt::Display for Datamap {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Datamap")
    }
}
