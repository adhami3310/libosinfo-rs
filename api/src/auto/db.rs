// This file was generated by gir (0409d73) from gir-files (???)
// DO NOT EDIT

use Datamap;
use DatamapList;
use Deployment;
use DeploymentList;
use Device;
use DeviceList;
use InstallScript;
use InstallScriptList;
use Media;
use Os;
use OsList;
use Platform;
use PlatformList;
use ProductRelationship;
use Tree;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Db(Object<ffi::OsinfoDb, ffi::OsinfoDbClass>);

    match fn {
        get_type => || ffi::osinfo_db_get_type(),
    }
}

impl Db {
    pub fn new() -> Db {
        unsafe {
            from_glib_full(ffi::osinfo_db_new())
        }
    }
}

impl Default for Db {
    fn default() -> Self {
        Self::new()
    }
}

pub trait DbExt {
    fn add_datamap(&self, datamap: &Datamap);

    fn add_deployment(&self, deployment: &Deployment);

    fn add_device(&self, device: &Device);

    fn add_install_script(&self, script: &InstallScript);

    fn add_os(&self, os: &Os);

    fn add_platform(&self, platform: &Platform);

    fn find_deployment(&self, os: &Os, platform: &Platform) -> Option<Deployment>;

    fn get_datamap(&self, id: &str) -> Option<Datamap>;

    fn get_datamap_list(&self) -> Option<DatamapList>;

    fn get_deployment(&self, id: &str) -> Option<Deployment>;

    fn get_deployment_list(&self) -> Option<DeploymentList>;

    fn get_device(&self, id: &str) -> Option<Device>;

    fn get_device_list(&self) -> Option<DeviceList>;

    fn get_install_script(&self, id: &str) -> Option<InstallScript>;

    fn get_install_script_list(&self) -> Option<InstallScriptList>;

    fn get_os(&self, id: &str) -> Option<Os>;

    fn get_os_list(&self) -> Option<OsList>;

    fn get_platform(&self, id: &str) -> Option<Platform>;

    fn get_platform_list(&self) -> Option<PlatformList>;

    fn guess_os_from_media(&self, media: &Media) -> (Os, Media);

    fn guess_os_from_tree(&self, tree: &Tree) -> (Os, Tree);

    fn identify_media(&self, media: &Media) -> bool;

    fn unique_values_for_os_relationship(&self, relshp: ProductRelationship) -> Option<OsList>;

    fn unique_values_for_platform_relationship(&self, relshp: ProductRelationship) -> Option<PlatformList>;

    fn unique_values_for_property_in_deployment(&self, propName: &str) -> Vec<String>;

    fn unique_values_for_property_in_device(&self, propName: &str) -> Vec<String>;

    fn unique_values_for_property_in_os(&self, propName: &str) -> Vec<String>;

    fn unique_values_for_property_in_platform(&self, propName: &str) -> Vec<String>;
}

impl<O: IsA<Db>> DbExt for O {
    fn add_datamap(&self, datamap: &Datamap) {
        unsafe {
            ffi::osinfo_db_add_datamap(self.to_glib_none().0, datamap.to_glib_none().0);
        }
    }

    fn add_deployment(&self, deployment: &Deployment) {
        unsafe {
            ffi::osinfo_db_add_deployment(self.to_glib_none().0, deployment.to_glib_none().0);
        }
    }

    fn add_device(&self, device: &Device) {
        unsafe {
            ffi::osinfo_db_add_device(self.to_glib_none().0, device.to_glib_none().0);
        }
    }

    fn add_install_script(&self, script: &InstallScript) {
        unsafe {
            ffi::osinfo_db_add_install_script(self.to_glib_none().0, script.to_glib_none().0);
        }
    }

    fn add_os(&self, os: &Os) {
        unsafe {
            ffi::osinfo_db_add_os(self.to_glib_none().0, os.to_glib_none().0);
        }
    }

    fn add_platform(&self, platform: &Platform) {
        unsafe {
            ffi::osinfo_db_add_platform(self.to_glib_none().0, platform.to_glib_none().0);
        }
    }

    fn find_deployment(&self, os: &Os, platform: &Platform) -> Option<Deployment> {
        unsafe {
            from_glib_none(ffi::osinfo_db_find_deployment(self.to_glib_none().0, os.to_glib_none().0, platform.to_glib_none().0))
        }
    }

    fn get_datamap(&self, id: &str) -> Option<Datamap> {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_datamap(self.to_glib_none().0, id.to_glib_none().0))
        }
    }

    fn get_datamap_list(&self) -> Option<DatamapList> {
        unsafe {
            from_glib_full(ffi::osinfo_db_get_datamap_list(self.to_glib_none().0))
        }
    }

    fn get_deployment(&self, id: &str) -> Option<Deployment> {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_deployment(self.to_glib_none().0, id.to_glib_none().0))
        }
    }

    fn get_deployment_list(&self) -> Option<DeploymentList> {
        unsafe {
            from_glib_full(ffi::osinfo_db_get_deployment_list(self.to_glib_none().0))
        }
    }

    fn get_device(&self, id: &str) -> Option<Device> {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_device(self.to_glib_none().0, id.to_glib_none().0))
        }
    }

    fn get_device_list(&self) -> Option<DeviceList> {
        unsafe {
            from_glib_full(ffi::osinfo_db_get_device_list(self.to_glib_none().0))
        }
    }

    fn get_install_script(&self, id: &str) -> Option<InstallScript> {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_install_script(self.to_glib_none().0, id.to_glib_none().0))
        }
    }

    fn get_install_script_list(&self) -> Option<InstallScriptList> {
        unsafe {
            from_glib_full(ffi::osinfo_db_get_install_script_list(self.to_glib_none().0))
        }
    }

    fn get_os(&self, id: &str) -> Option<Os> {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_os(self.to_glib_none().0, id.to_glib_none().0))
        }
    }

    fn get_os_list(&self) -> Option<OsList> {
        unsafe {
            from_glib_full(ffi::osinfo_db_get_os_list(self.to_glib_none().0))
        }
    }

    fn get_platform(&self, id: &str) -> Option<Platform> {
        unsafe {
            from_glib_none(ffi::osinfo_db_get_platform(self.to_glib_none().0, id.to_glib_none().0))
        }
    }

    fn get_platform_list(&self) -> Option<PlatformList> {
        unsafe {
            from_glib_full(ffi::osinfo_db_get_platform_list(self.to_glib_none().0))
        }
    }

    fn guess_os_from_media(&self, media: &Media) -> (Os, Media) {
        unsafe {
            let mut matched_media = ptr::null_mut();
            let ret = from_glib_none(ffi::osinfo_db_guess_os_from_media(self.to_glib_none().0, media.to_glib_none().0, &mut matched_media));
            (ret, from_glib_none(matched_media))
        }
    }

    fn guess_os_from_tree(&self, tree: &Tree) -> (Os, Tree) {
        unsafe {
            let mut matched_tree = ptr::null_mut();
            let ret = from_glib_none(ffi::osinfo_db_guess_os_from_tree(self.to_glib_none().0, tree.to_glib_none().0, &mut matched_tree));
            (ret, from_glib_none(matched_tree))
        }
    }

    fn identify_media(&self, media: &Media) -> bool {
        unsafe {
            from_glib(ffi::osinfo_db_identify_media(self.to_glib_none().0, media.to_glib_none().0))
        }
    }

    fn unique_values_for_os_relationship(&self, relshp: ProductRelationship) -> Option<OsList> {
        unsafe {
            from_glib_full(ffi::osinfo_db_unique_values_for_os_relationship(self.to_glib_none().0, relshp.to_glib()))
        }
    }

    fn unique_values_for_platform_relationship(&self, relshp: ProductRelationship) -> Option<PlatformList> {
        unsafe {
            from_glib_full(ffi::osinfo_db_unique_values_for_platform_relationship(self.to_glib_none().0, relshp.to_glib()))
        }
    }

    fn unique_values_for_property_in_deployment(&self, propName: &str) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_db_unique_values_for_property_in_deployment(self.to_glib_none().0, propName.to_glib_none().0))
        }
    }

    fn unique_values_for_property_in_device(&self, propName: &str) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_db_unique_values_for_property_in_device(self.to_glib_none().0, propName.to_glib_none().0))
        }
    }

    fn unique_values_for_property_in_os(&self, propName: &str) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_db_unique_values_for_property_in_os(self.to_glib_none().0, propName.to_glib_none().0))
        }
    }

    fn unique_values_for_property_in_platform(&self, propName: &str) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_db_unique_values_for_property_in_platform(self.to_glib_none().0, propName.to_glib_none().0))
        }
    }
}
